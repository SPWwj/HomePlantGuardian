

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Feb 08 01:14:02 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36  0000                     
    37                           ; Version 1.44
    38                           ; Generated 14/09/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	smallconst
    73  001012                     __psmallconst:
    74                           	opt stack 0
    75  001012  00                 	db	0
    76  001013                     _dpowers:
    77                           	opt stack 0
    78  001013  0001               	dw	1
    79  001015  000A               	dw	10
    80  001017  0064               	dw	100
    81  001019  03E8               	dw	1000
    82  00101B  2710               	dw	10000
    83  00101D                     __end_of_dpowers:
    84                           	opt stack 0
    85  0000                     _PIE1bits	set	3997
    86  0000                     _OSCCON	set	4051
    87  0000                     _ADCON2	set	4032
    88  0000                     _ADCON1	set	4033
    89  0000                     _PORTD	set	3971
    90  0000                     _TRISD	set	3989
    91  0000                     _INTCONbits	set	4082
    92  0000                     _STATUS	set	4056
    93  0000                     _PORTDbits	set	3971
    94  0000                     _ADRESH	set	4036
    95  0000                     _ADCON0bits	set	4034
    96  0000                     _ADCON0	set	4034
    97  0000                     _RCREG	set	4014
    98  0000                     _TXREG	set	4013
    99  0000                     _RCSTA	set	4011
   100  0000                     _BAUDCON	set	4024
   101  0000                     _TXSTA	set	4012
   102  0000                     _SPBRG	set	4015
   103  0000                     _RCIF	set	31989
   104  0000                     _TXIF	set	31988
   105  0000                     _TRISC7	set	31911
   106  0000                     _TRISC6	set	31910
   107  00101D                     STR_1:
   108  00101D  25                 	db	37
   109  00101E  64                 	db	100	;'d'
   110  00101F  00                 	db	0
   111  001020                     STR_10:
   112  001020  0A                 	db	10
   113  001021  00                 	db	0
   114  001022                     STR_3:
   115  001022  2C                 	db	44
   116  001023  00                 	db	0
   117  0000                     
   118                           ; #config settings
   119  001024  00                 	db	0	; dummy byte at the end
   120  0000                     
   121                           	psect	cinit
   122  001D0A                     __pcinit:
   123                           	opt stack 0
   124  001D0A                     start_initialization:
   125                           	opt stack 0
   126  001D0A                     __initialization:
   127                           	opt stack 0
   128                           
   129                           ; Clear objects allocated to BANK1 (160 bytes)
   130  001D0A  EE01  F000         	lfsr	0,__pbssBANK1
   131  001D0E  0EA0               	movlw	160
   132  001D10                     clear_0:
   133  001D10  6AEE               	clrf	postinc0,c
   134  001D12  06E8               	decf	wreg,f,c
   135  001D14  E1FD               	bnz	clear_0
   136                           
   137                           ; Clear objects allocated to COMRAM (35 bytes)
   138  001D16  EE00  F02E         	lfsr	0,__pbssCOMRAM
   139  001D1A  0E23               	movlw	35
   140  001D1C                     clear_1:
   141  001D1C  6AEE               	clrf	postinc0,c
   142  001D1E  06E8               	decf	wreg,f,c
   143  001D20  E1FD               	bnz	clear_1
   144  001D22                     end_of_initialization:
   145                           	opt stack 0
   146  001D22                     __end_of__initialization:
   147                           	opt stack 0
   148  001D22  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   149  001D24  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   150  001D26  0E00               	movlw	low (__Lmediumconst shr (0+16))
   151  001D28  6EF8               	movwf	tblptru,c
   152  001D2A  0100               	movlb	0
   153  001D2C  EF8F  F00C         	goto	_main	;jump to C main() function
   154                           tblptru	equ	0xFF8
   155                           postinc0	equ	0xFEE
   156                           wreg	equ	0xFE8
   157                           
   158                           	psect	bssCOMRAM
   159  00002E                     __pbssCOMRAM:
   160                           	opt stack 0
   161  00002E                     _TimeOut:
   162                           	opt stack 0
   163  00002E                     	ds	4
   164  000032                     _light:
   165                           	opt stack 0
   166  000032                     	ds	2
   167  000034                     _rain:
   168                           	opt stack 0
   169  000034                     	ds	2
   170  000036                     _force:
   171                           	opt stack 0
   172  000036                     	ds	2
   173  000038                     _soil:
   174                           	opt stack 0
   175  000038                     	ds	2
   176  00003A                     _temp:
   177                           	opt stack 0
   178  00003A                     	ds	2
   179  00003C                     _pointer:
   180                           	opt stack 0
   181  00003C                     	ds	2
   182  00003E                     _Counter:
   183                           	opt stack 0
   184  00003E                     	ds	2
   185  000040                     _Response_Status:
   186                           	opt stack 0
   187  000040                     	ds	1
   188  000041                     _mystring:
   189                           	opt stack 0
   190  000041                     	ds	16
   191                           tblptru	equ	0xFF8
   192                           postinc0	equ	0xFEE
   193                           wreg	equ	0xFE8
   194                           
   195                           	psect	bssBANK1
   196  000100                     __pbssBANK1:
   197                           	opt stack 0
   198  000100                     _RESPONSE_BUFFER:
   199                           	opt stack 0
   200  000100                     	ds	160
   201                           tblptru	equ	0xFF8
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           
   205                           	psect	cstackBANK0
   206  000060                     __pcstackBANK0:
   207                           	opt stack 0
   208  000060                     ?___wmul:
   209                           	opt stack 0
   210  000060                     ?___ftpack:
   211                           	opt stack 0
   212  000060                     MSdelay@val:
   213                           	opt stack 0
   214  000060                     ___wmul@multiplier:
   215                           	opt stack 0
   216  000060                     ___ftpack@arg:
   217                           	opt stack 0
   218                           
   219                           ; 3 bytes @ 0x0
   220  000060                     	ds	2
   221  000062                     MSdelay@i:
   222                           	opt stack 0
   223  000062                     ___wmul@multiplicand:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x2
   227  000062                     	ds	1
   228  000063                     ___ftpack@exp:
   229                           	opt stack 0
   230                           
   231                           ; 1 bytes @ 0x3
   232  000063                     	ds	1
   233  000064                     ___ftpack@sign:
   234                           	opt stack 0
   235  000064                     MSdelay@j:
   236                           	opt stack 0
   237  000064                     ___wmul@product:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x4
   241  000064                     	ds	1
   242  000065                     ??___ftpack:
   243                           
   244                           ; 1 bytes @ 0x5
   245  000065                     	ds	1
   246  000066                     ?___awdiv:
   247                           	opt stack 0
   248  000066                     ___awdiv@dividend:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x6
   252  000066                     	ds	2
   253  000068                     ?___altoft:
   254                           	opt stack 0
   255  000068                     ___awdiv@divisor:
   256                           	opt stack 0
   257  000068                     ___altoft@c:
   258                           	opt stack 0
   259                           
   260                           ; 4 bytes @ 0x8
   261  000068                     	ds	2
   262  00006A                     ___awdiv@counter:
   263                           	opt stack 0
   264                           
   265                           ; 1 bytes @ 0xA
   266  00006A                     	ds	1
   267  00006B                     ___awdiv@sign:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0xB
   271  00006B                     	ds	1
   272  00006C                     ??___altoft:
   273  00006C                     ___awdiv@quotient:
   274                           	opt stack 0
   275                           
   276                           ; 2 bytes @ 0xC
   277  00006C                     	ds	2
   278  00006E                     ??_readSensor:
   279                           
   280                           ; 1 bytes @ 0xE
   281  00006E                     	ds	2
   282  000070                     ___altoft@exp:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0x10
   286  000070                     	ds	1
   287  000071                     ___altoft@sign:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x11
   291  000071                     	ds	1
   292  000072                     ?___ftdiv:
   293                           	opt stack 0
   294  000072                     ___ftdiv@f1:
   295                           	opt stack 0
   296                           
   297                           ; 3 bytes @ 0x12
   298  000072                     	ds	3
   299  000075                     ___ftdiv@f2:
   300                           	opt stack 0
   301                           
   302                           ; 3 bytes @ 0x15
   303  000075                     	ds	3
   304  000078                     ??___ftdiv:
   305                           
   306                           ; 1 bytes @ 0x18
   307  000078                     	ds	3
   308  00007B                     ___ftdiv@cntr:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x1B
   312  00007B                     	ds	1
   313  00007C                     ___ftdiv@f3:
   314                           	opt stack 0
   315                           
   316                           ; 3 bytes @ 0x1C
   317  00007C                     	ds	3
   318  00007F                     ___ftdiv@exp:
   319                           	opt stack 0
   320                           
   321                           ; 1 bytes @ 0x1F
   322  00007F                     	ds	1
   323  000080                     ___ftdiv@sign:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x20
   327  000080                     	ds	1
   328  000081                     ?___ftadd:
   329                           	opt stack 0
   330  000081                     ___ftadd@f1:
   331                           	opt stack 0
   332                           
   333                           ; 3 bytes @ 0x21
   334  000081                     	ds	3
   335  000084                     ___ftadd@f2:
   336                           	opt stack 0
   337                           
   338                           ; 3 bytes @ 0x24
   339  000084                     	ds	3
   340  000087                     ??___ftadd:
   341                           
   342                           ; 1 bytes @ 0x27
   343  000087                     	ds	3
   344  00008A                     ___ftadd@sign:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x2A
   348  00008A                     	ds	1
   349  00008B                     ___ftadd@exp2:
   350                           	opt stack 0
   351                           
   352                           ; 1 bytes @ 0x2B
   353  00008B                     	ds	1
   354  00008C                     ___ftadd@exp1:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x2C
   358  00008C                     	ds	1
   359  00008D                     ?___fttol:
   360                           	opt stack 0
   361  00008D                     ___fttol@f1:
   362                           	opt stack 0
   363                           
   364                           ; 3 bytes @ 0x2D
   365  00008D                     	ds	4
   366  000091                     ??___fttol:
   367                           
   368                           ; 1 bytes @ 0x31
   369  000091                     	ds	5
   370  000096                     ___fttol@sign1:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x36
   374  000096                     	ds	1
   375  000097                     ___fttol@lval:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x37
   379  000097                     	ds	4
   380  00009B                     ___fttol@exp1:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x3B
   384  00009B                     	ds	1
   385  00009C                     USART_Init@baud_rate:
   386                           	opt stack 0
   387                           
   388                           ; 4 bytes @ 0x3C
   389  00009C                     	ds	4
   390  0000A0                     main@start:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x40
   394  0000A0                     	ds	2
   395                           tblptru	equ	0xFF8
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           
   399                           	psect	cstackCOMRAM
   400  000001                     __pcstackCOMRAM:
   401                           	opt stack 0
   402  000001                     ?___lwdiv:
   403                           	opt stack 0
   404  000001                     USART_TxChar@data:
   405                           	opt stack 0
   406  000001                     ___lwdiv@dividend:
   407                           	opt stack 0
   408  000001                     i2MSdelay@val:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x0
   412  000001                     	ds	1
   413  000002                     USART_SendString@str:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x1
   417  000002                     	ds	1
   418  000003                     ___lwdiv@divisor:
   419                           	opt stack 0
   420  000003                     i2MSdelay@i:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2
   424  000003                     	ds	1
   425  000004                     
   426                           ; 1 bytes @ 0x3
   427  000004                     	ds	1
   428  000005                     ___lwdiv@quotient:
   429                           	opt stack 0
   430  000005                     i2MSdelay@j:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x4
   434  000005                     	ds	2
   435  000007                     ___lwdiv@counter:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x6
   439  000007                     	ds	1
   440  000008                     ?___lwmod:
   441                           	opt stack 0
   442  000008                     ___lwmod@dividend:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x7
   446  000008                     	ds	2
   447  00000A                     ___lwmod@divisor:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x9
   451  00000A                     	ds	2
   452  00000C                     ___lwmod@counter:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0xB
   456  00000C                     	ds	1
   457  00000D                     ?_sprintf:
   458                           	opt stack 0
   459  00000D                     sprintf@sp:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0xC
   463  00000D                     	ds	2
   464  00000F                     sprintf@f:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0xE
   468  00000F                     	ds	4
   469  000013                     ??_sprintf:
   470                           
   471                           ; 1 bytes @ 0x12
   472  000013                     	ds	1
   473  000014                     sprintf@ap:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0x13
   477  000014                     	ds	2
   478  000016                     sprintf@flag:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x15
   482  000016                     	ds	1
   483  000017                     sprintf@prec:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x16
   487  000017                     	ds	1
   488  000018                     sprintf@val:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x17
   492  000018                     	ds	2
   493  00001A                     sprintf@c:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x19
   497  00001A                     	ds	1
   498  00001B                     ??_ISR:
   499                           
   500                           ; 1 bytes @ 0x1A
   501  00001B                     	ds	18
   502  00002D                     ISR@oldstatus:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x2C
   506  00002D                     	ds	1
   507                           tblptru	equ	0xFF8
   508                           postinc0	equ	0xFEE
   509                           wreg	equ	0xFE8
   510                           
   511 ;;
   512 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   513 ;;
   514 ;; *************** function _main *****************
   515 ;; Defined at:
   516 ;;		line 152 in file "PIC_ESP8266_WiFi.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;  _buffer       150    0        unsigned char [150]
   521 ;;  start           2   64[BANK0 ] unsigned int 
   522 ;; Return value:  Size  Location     Type
   523 ;;                  2  152[None  ] int 
   524 ;; Registers used:
   525 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   531 ;;      Params:         0       0       0       0       0       0       0       0       0
   532 ;;      Locals:         0       2       0       0       0       0       0       0       0
   533 ;;      Temps:          0       0       0       0       0       0       0       0       0
   534 ;;      Totals:         0       2       0       0       0       0       0       0       0
   535 ;;Total ram usage:        2 bytes
   536 ;; Hardware stack levels required when called:    7
   537 ;; This function calls:
   538 ;;		_MSdelay
   539 ;;		_USART_Init
   540 ;;		_readSensor
   541 ;;		_tackeAction
   542 ;; This function is called by:
   543 ;;		Startup code after reset
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           	psect	text0
   548  00191E                     __ptext0:
   549                           	opt stack 0
   550  00191E                     _main:
   551                           	opt stack 24
   552                           
   553                           ;PIC_ESP8266_WiFi.c: 156: TRISD = 0x00;
   554                           
   555                           ;incstack = 0
   556  00191E  0E00               	movlw	0
   557  001920  6E95               	movwf	3989,c	;volatile
   558                           
   559                           ;PIC_ESP8266_WiFi.c: 157: PORTD = 0x00;
   560  001922  0E00               	movlw	0
   561  001924  6E83               	movwf	3971,c	;volatile
   562                           
   563                           ;PIC_ESP8266_WiFi.c: 173: ADCON1 = 0b00000000;
   564  001926  0E00               	movlw	0
   565  001928  6EC1               	movwf	4033,c	;volatile
   566                           
   567                           ;PIC_ESP8266_WiFi.c: 177: ADCON2 = 0b00010110;
   568  00192A  0E16               	movlw	22
   569  00192C  6EC0               	movwf	4032,c	;volatile
   570                           
   571                           ;PIC_ESP8266_WiFi.c: 182: char _buffer[150];
   572                           ;PIC_ESP8266_WiFi.c: 183: OSCCON = 0x72;
   573  00192E  0E72               	movlw	114
   574  001930  6ED3               	movwf	4051,c	;volatile
   575                           
   576                           ;PIC_ESP8266_WiFi.c: 184: USART_Init(9600);
   577  001932  0E80               	movlw	128
   578  001934  0100               	movlb	0	; () banked
   579  001936  6F9C               	movwf	USART_Init@baud_rate& (0+255),b
   580  001938  0E25               	movlw	37
   581  00193A  6F9D               	movwf	(USART_Init@baud_rate+1)& (0+255),b
   582  00193C  0E00               	movlw	0
   583  00193E  6F9E               	movwf	(USART_Init@baud_rate+2)& (0+255),b
   584  001940  0E00               	movlw	0
   585  001942  6F9F               	movwf	(USART_Init@baud_rate+3)& (0+255),b
   586  001944  EC53  F00D         	call	_USART_Init	;wreg free
   587                           
   588                           ;PIC_ESP8266_WiFi.c: 185: INTCONbits.GIE=1;
   589  001948  8EF2               	bsf	intcon,7,c	;volatile
   590                           
   591                           ;PIC_ESP8266_WiFi.c: 186: INTCONbits.PEIE=1;
   592  00194A  8CF2               	bsf	intcon,6,c	;volatile
   593                           
   594                           ;PIC_ESP8266_WiFi.c: 187: PIE1bits.RCIE=1;
   595  00194C  8A9D               	bsf	3997,5,c	;volatile
   596                           
   597                           ;PIC_ESP8266_WiFi.c: 188: unsigned int start =0;
   598  00194E  0E00               	movlw	0
   599  001950  0100               	movlb	0	; () banked
   600  001952  6FA1               	movwf	(main@start+1)& (0+255),b
   601  001954  0E00               	movlw	0
   602  001956  6FA0               	movwf	main@start& (0+255),b
   603                           
   604                           ;PIC_ESP8266_WiFi.c: 189: MSdelay(1000);
   605  001958  0E03               	movlw	3
   606  00195A  6F61               	movwf	(MSdelay@val+1)& (0+255),b
   607  00195C  0EE8               	movlw	232
   608  00195E  6F60               	movwf	MSdelay@val& (0+255),b
   609  001960  EC3A  F00E         	call	_MSdelay	;wreg free
   610                           
   611                           ;PIC_ESP8266_WiFi.c: 191: MSdelay(1000);
   612  001964  0E03               	movlw	3
   613  001966  0100               	movlb	0	; () banked
   614  001968  6F61               	movwf	(MSdelay@val+1)& (0+255),b
   615  00196A  0EE8               	movlw	232
   616  00196C  6F60               	movwf	MSdelay@val& (0+255),b
   617  00196E  EC3A  F00E         	call	_MSdelay	;wreg free
   618  001972                     l153:
   619                           
   620                           ;PIC_ESP8266_WiFi.c: 196: {
   621                           ;PIC_ESP8266_WiFi.c: 203: MSdelay(100);
   622  001972  0E00               	movlw	0
   623  001974  0100               	movlb	0	; () banked
   624  001976  6F61               	movwf	(MSdelay@val+1)& (0+255),b
   625  001978  0E64               	movlw	100
   626  00197A  6F60               	movwf	MSdelay@val& (0+255),b
   627  00197C  EC3A  F00E         	call	_MSdelay	;wreg free
   628                           
   629                           ;PIC_ESP8266_WiFi.c: 214: readSensor();
   630  001980  EC13  F008         	call	_readSensor	;wreg free
   631                           
   632                           ;PIC_ESP8266_WiFi.c: 215: MSdelay(1000);
   633  001984  0E03               	movlw	3
   634  001986  0100               	movlb	0	; () banked
   635  001988  6F61               	movwf	(MSdelay@val+1)& (0+255),b
   636  00198A  0EE8               	movlw	232
   637  00198C  6F60               	movwf	MSdelay@val& (0+255),b
   638  00198E  EC3A  F00E         	call	_MSdelay	;wreg free
   639                           
   640                           ;PIC_ESP8266_WiFi.c: 218: tackeAction();
   641  001992  EC8F  F00D         	call	_tackeAction	;wreg free
   642                           
   643                           ;PIC_ESP8266_WiFi.c: 219: MSdelay(100);
   644  001996  0E00               	movlw	0
   645  001998  0100               	movlb	0	; () banked
   646  00199A  6F61               	movwf	(MSdelay@val+1)& (0+255),b
   647  00199C  0E64               	movlw	100
   648  00199E  6F60               	movwf	MSdelay@val& (0+255),b
   649  0019A0  EC3A  F00E         	call	_MSdelay	;wreg free
   650  0019A4  D7E6               	goto	l153
   651  0019A6                     __end_of_main:
   652                           	opt stack 0
   653                           tblptru	equ	0xFF8
   654                           intcon	equ	0xFF2
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           
   658 ;; *************** function _tackeAction *****************
   659 ;; Defined at:
   660 ;;		line 81 in file "PIC_ESP8266_WiFi.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, status,2, status,0
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   674 ;;      Params:         0       0       0       0       0       0       0       0       0
   675 ;;      Locals:         0       0       0       0       0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0       0       0
   677 ;;      Totals:         0       0       0       0       0       0       0       0       0
   678 ;;Total ram usage:        0 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    4
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text1
   689  001B1E                     __ptext1:
   690                           	opt stack 0
   691  001B1E                     _tackeAction:
   692                           	opt stack 26
   693                           
   694                           ;PIC_ESP8266_WiFi.c: 83: if(temp >10) PORTDbits.RD0=1;
   695                           
   696                           ;incstack = 0
   697  001B1E  BE3B               	btfsc	_temp+1,7,c
   698  001B20  D008               	goto	l128
   699  001B22  503B               	movf	_temp+1,w,c
   700  001B24  E104               	bnz	u2230
   701  001B26  0E0B               	movlw	11
   702  001B28  5C3A               	subwf	_temp,w,c
   703  001B2A  A0D8               	btfss	status,0,c
   704  001B2C  D002               	goto	l128
   705  001B2E                     u2230:
   706  001B2E  8083               	bsf	3971,0,c	;volatile
   707  001B30  D001               	goto	l129
   708  001B32                     l128:
   709                           
   710                           ;PIC_ESP8266_WiFi.c: 84: else PORTDbits.RD0 =0;
   711  001B32  9083               	bcf	3971,0,c	;volatile
   712  001B34                     l129:
   713                           
   714                           ;PIC_ESP8266_WiFi.c: 86: if(soil <20) PORTDbits.RD1=0;
   715  001B34  BE39               	btfsc	_soil+1,7,c
   716  001B36  D006               	goto	u2240
   717  001B38  5039               	movf	_soil+1,w,c
   718  001B3A  E106               	bnz	l130
   719  001B3C  0E14               	movlw	20
   720  001B3E  5C38               	subwf	_soil,w,c
   721  001B40  B0D8               	btfsc	status,0,c
   722  001B42  D002               	goto	l130
   723  001B44                     u2240:
   724  001B44  9283               	bcf	3971,1,c	;volatile
   725  001B46  D001               	goto	l131
   726  001B48                     l130:
   727                           
   728                           ;PIC_ESP8266_WiFi.c: 87: else PORTDbits.RD1 =1;
   729  001B48  8283               	bsf	3971,1,c	;volatile
   730  001B4A                     l131:
   731                           
   732                           ;PIC_ESP8266_WiFi.c: 89: if(force <30) PORTDbits.RD2=1;
   733  001B4A  BE37               	btfsc	_force+1,7,c
   734  001B4C  D006               	goto	u2250
   735  001B4E  5037               	movf	_force+1,w,c
   736  001B50  E106               	bnz	l132
   737  001B52  0E1E               	movlw	30
   738  001B54  5C36               	subwf	_force,w,c
   739  001B56  B0D8               	btfsc	status,0,c
   740  001B58  D002               	goto	l132
   741  001B5A                     u2250:
   742  001B5A  8483               	bsf	3971,2,c	;volatile
   743  001B5C  D001               	goto	l133
   744  001B5E                     l132:
   745                           
   746                           ;PIC_ESP8266_WiFi.c: 90: else PORTDbits.RD2 =0;
   747  001B5E  9483               	bcf	3971,2,c	;volatile
   748  001B60                     l133:
   749                           
   750                           ;PIC_ESP8266_WiFi.c: 92: if(rain <90) PORTDbits.RD3=1;
   751  001B60  BE35               	btfsc	_rain+1,7,c
   752  001B62  D006               	goto	u2260
   753  001B64  5035               	movf	_rain+1,w,c
   754  001B66  E106               	bnz	l134
   755  001B68  0E5A               	movlw	90
   756  001B6A  5C34               	subwf	_rain,w,c
   757  001B6C  B0D8               	btfsc	status,0,c
   758  001B6E  D002               	goto	l134
   759  001B70                     u2260:
   760  001B70  8683               	bsf	3971,3,c	;volatile
   761  001B72  D001               	goto	l135
   762  001B74                     l134:
   763                           
   764                           ;PIC_ESP8266_WiFi.c: 93: else PORTDbits.RD3 =0;
   765  001B74  9683               	bcf	3971,3,c	;volatile
   766  001B76                     l135:
   767                           
   768                           ;PIC_ESP8266_WiFi.c: 95: if(light <50) PORTDbits.RD4=0;
   769  001B76  BE33               	btfsc	_light+1,7,c
   770  001B78  D006               	goto	u2270
   771  001B7A  5033               	movf	_light+1,w,c
   772  001B7C  E106               	bnz	l136
   773  001B7E  0E32               	movlw	50
   774  001B80  5C32               	subwf	_light,w,c
   775  001B82  B0D8               	btfsc	status,0,c
   776  001B84  D002               	goto	l136
   777  001B86                     u2270:
   778  001B86  9883               	bcf	3971,4,c	;volatile
   779  001B88  0012               	return	
   780  001B8A                     l136:
   781                           
   782                           ;PIC_ESP8266_WiFi.c: 96: else PORTDbits.RD4 =1;
   783  001B8A  8883               	bsf	3971,4,c	;volatile
   784  001B8C  0012               	return	
   785  001B8E                     __end_of_tackeAction:
   786                           	opt stack 0
   787                           tblptru	equ	0xFF8
   788                           intcon	equ	0xFF2
   789                           postinc0	equ	0xFEE
   790                           wreg	equ	0xFE8
   791                           status	equ	0xFD8
   792                           
   793 ;; *************** function _readSensor *****************
   794 ;; Defined at:
   795 ;;		line 49 in file "PIC_ESP8266_WiFi.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   809 ;;      Params:         0       0       0       0       0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0       0       0
   811 ;;      Temps:          0       2       0       0       0       0       0       0       0
   812 ;;      Totals:         0       2       0       0       0       0       0       0       0
   813 ;;Total ram usage:        2 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    5
   816 ;; This function calls:
   817 ;;		_MSdelay
   818 ;;		___awdiv
   819 ;;		___wmul
   820 ;; This function is called by:
   821 ;;		_main
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text2
   826  001026                     __ptext2:
   827                           	opt stack 0
   828  001026                     _readSensor:
   829                           	opt stack 25
   830                           
   831                           ;PIC_ESP8266_WiFi.c: 51: ADCON0 = 0b00000001;
   832                           
   833                           ;incstack = 0
   834  001026  0E01               	movlw	1
   835  001028  6EC2               	movwf	4034,c	;volatile
   836                           
   837                           ;PIC_ESP8266_WiFi.c: 52: ADCON0bits.GO = 1;
   838  00102A  82C2               	bsf	4034,1,c	;volatile
   839  00102C  B2C2               	btfsc	4034,1,c	;volatile
   840  00102E  D7FE               	goto	l111
   841                           
   842                           ;PIC_ESP8266_WiFi.c: 54: temp = ADRESH;
   843  001030  CFC4 F03A          	movff	4036,_temp	;volatile
   844  001034  6A3B               	clrf	_temp+1,c
   845                           
   846                           ;PIC_ESP8266_WiFi.c: 55: temp=temp*24/60;
   847  001036  C03A  F060         	movff	_temp,___wmul@multiplier
   848  00103A  C03B  F061         	movff	_temp+1,___wmul@multiplier+1
   849  00103E  0E00               	movlw	0
   850  001040  0100               	movlb	0	; () banked
   851  001042  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   852  001044  0E18               	movlw	24
   853  001046  6F62               	movwf	___wmul@multiplicand& (0+255),b
   854  001048  EC71  F00E         	call	___wmul	;wreg free
   855  00104C  C060  F066         	movff	?___wmul,___awdiv@dividend
   856  001050  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
   857  001054  0E00               	movlw	0
   858  001056  0100               	movlb	0	; () banked
   859  001058  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
   860  00105A  0E3C               	movlw	60
   861  00105C  6F68               	movwf	___awdiv@divisor& (0+255),b
   862  00105E  ECD3  F00C         	call	___awdiv	;wreg free
   863  001062  C066  F03A         	movff	?___awdiv,_temp
   864  001066  C067  F03B         	movff	?___awdiv+1,_temp+1
   865                           
   866                           ;PIC_ESP8266_WiFi.c: 57: MSdelay(100);
   867  00106A  0E00               	movlw	0
   868  00106C  0100               	movlb	0	; () banked
   869  00106E  6F61               	movwf	(MSdelay@val+1)& (0+255),b
   870  001070  0E64               	movlw	100
   871  001072  6F60               	movwf	MSdelay@val& (0+255),b
   872  001074  EC3A  F00E         	call	_MSdelay	;wreg free
   873                           
   874                           ;PIC_ESP8266_WiFi.c: 58: ADCON0 = 0b00000101;
   875  001078  0E05               	movlw	5
   876  00107A  6EC2               	movwf	4034,c	;volatile
   877                           
   878                           ;PIC_ESP8266_WiFi.c: 59: ADCON0bits.GO = 1;
   879  00107C  82C2               	bsf	4034,1,c	;volatile
   880  00107E  B2C2               	btfsc	4034,1,c	;volatile
   881  001080  D7FE               	goto	l114
   882                           
   883                           ;PIC_ESP8266_WiFi.c: 61: soil = ADRESH;
   884  001082  CFC4 F038          	movff	4036,_soil	;volatile
   885  001086  6A39               	clrf	_soil+1,c
   886                           
   887                           ;PIC_ESP8266_WiFi.c: 62: soil=(255-soil)*100/255;
   888  001088  C038  F06E         	movff	_soil,??_readSensor
   889  00108C  C039  F06F         	movff	_soil+1,??_readSensor+1
   890  001090  0100               	movlb	0	; () banked
   891  001092  1F6E               	comf	??_readSensor& (0+255),f,b
   892  001094  1F6F               	comf	(??_readSensor+1)& (0+255),f,b
   893  001096  4B6E               	infsnz	??_readSensor& (0+255),f,b
   894  001098  2B6F               	incf	(??_readSensor+1)& (0+255),f,b
   895  00109A  0EFF               	movlw	255
   896  00109C  256E               	addwf	??_readSensor& (0+255),w,b
   897  00109E  6F60               	movwf	___wmul@multiplier& (0+255),b
   898  0010A0  0E00               	movlw	0
   899  0010A2  216F               	addwfc	(??_readSensor+1)& (0+255),w,b
   900  0010A4  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
   901  0010A6  0E00               	movlw	0
   902  0010A8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   903  0010AA  0E64               	movlw	100
   904  0010AC  6F62               	movwf	___wmul@multiplicand& (0+255),b
   905  0010AE  EC71  F00E         	call	___wmul	;wreg free
   906  0010B2  C060  F066         	movff	?___wmul,___awdiv@dividend
   907  0010B6  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
   908  0010BA  0E00               	movlw	0
   909  0010BC  0100               	movlb	0	; () banked
   910  0010BE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
   911  0010C0  6968               	setf	___awdiv@divisor& (0+255),b
   912  0010C2  ECD3  F00C         	call	___awdiv	;wreg free
   913  0010C6  C066  F038         	movff	?___awdiv,_soil
   914  0010CA  C067  F039         	movff	?___awdiv+1,_soil+1
   915                           
   916                           ;PIC_ESP8266_WiFi.c: 63: ADCON0 = 0b00001001;
   917  0010CE  0E09               	movlw	9
   918  0010D0  6EC2               	movwf	4034,c	;volatile
   919                           
   920                           ;PIC_ESP8266_WiFi.c: 64: ADCON0bits.GO = 1;
   921  0010D2  82C2               	bsf	4034,1,c	;volatile
   922  0010D4  B2C2               	btfsc	4034,1,c	;volatile
   923  0010D6  D7FE               	goto	l117
   924                           
   925                           ;PIC_ESP8266_WiFi.c: 66: force = ADRESH;
   926  0010D8  CFC4 F036          	movff	4036,_force	;volatile
   927  0010DC  6A37               	clrf	_force+1,c
   928                           
   929                           ;PIC_ESP8266_WiFi.c: 67: force=(255-force)*100/255;
   930  0010DE  C036  F06E         	movff	_force,??_readSensor
   931  0010E2  C037  F06F         	movff	_force+1,??_readSensor+1
   932  0010E6  0100               	movlb	0	; () banked
   933  0010E8  1F6E               	comf	??_readSensor& (0+255),f,b
   934  0010EA  1F6F               	comf	(??_readSensor+1)& (0+255),f,b
   935  0010EC  4B6E               	infsnz	??_readSensor& (0+255),f,b
   936  0010EE  2B6F               	incf	(??_readSensor+1)& (0+255),f,b
   937  0010F0  0EFF               	movlw	255
   938  0010F2  256E               	addwf	??_readSensor& (0+255),w,b
   939  0010F4  6F60               	movwf	___wmul@multiplier& (0+255),b
   940  0010F6  0E00               	movlw	0
   941  0010F8  216F               	addwfc	(??_readSensor+1)& (0+255),w,b
   942  0010FA  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
   943  0010FC  0E00               	movlw	0
   944  0010FE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   945  001100  0E64               	movlw	100
   946  001102  6F62               	movwf	___wmul@multiplicand& (0+255),b
   947  001104  EC71  F00E         	call	___wmul	;wreg free
   948  001108  C060  F066         	movff	?___wmul,___awdiv@dividend
   949  00110C  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
   950  001110  0E00               	movlw	0
   951  001112  0100               	movlb	0	; () banked
   952  001114  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
   953  001116  6968               	setf	___awdiv@divisor& (0+255),b
   954  001118  ECD3  F00C         	call	___awdiv	;wreg free
   955  00111C  C066  F036         	movff	?___awdiv,_force
   956  001120  C067  F037         	movff	?___awdiv+1,_force+1
   957                           
   958                           ;PIC_ESP8266_WiFi.c: 68: ADCON0 = 0b00001101;
   959  001124  0E0D               	movlw	13
   960  001126  6EC2               	movwf	4034,c	;volatile
   961                           
   962                           ;PIC_ESP8266_WiFi.c: 69: ADCON0bits.GO = 1;
   963  001128  82C2               	bsf	4034,1,c	;volatile
   964  00112A  B2C2               	btfsc	4034,1,c	;volatile
   965  00112C  D7FE               	goto	l120
   966                           
   967                           ;PIC_ESP8266_WiFi.c: 71: rain = ADRESH;
   968  00112E  CFC4 F034          	movff	4036,_rain	;volatile
   969  001132  6A35               	clrf	_rain+1,c
   970                           
   971                           ;PIC_ESP8266_WiFi.c: 72: rain=(255-rain)*100/255;
   972  001134  C034  F06E         	movff	_rain,??_readSensor
   973  001138  C035  F06F         	movff	_rain+1,??_readSensor+1
   974  00113C  0100               	movlb	0	; () banked
   975  00113E  1F6E               	comf	??_readSensor& (0+255),f,b
   976  001140  1F6F               	comf	(??_readSensor+1)& (0+255),f,b
   977  001142  4B6E               	infsnz	??_readSensor& (0+255),f,b
   978  001144  2B6F               	incf	(??_readSensor+1)& (0+255),f,b
   979  001146  0EFF               	movlw	255
   980  001148  256E               	addwf	??_readSensor& (0+255),w,b
   981  00114A  6F60               	movwf	___wmul@multiplier& (0+255),b
   982  00114C  0E00               	movlw	0
   983  00114E  216F               	addwfc	(??_readSensor+1)& (0+255),w,b
   984  001150  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
   985  001152  0E00               	movlw	0
   986  001154  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   987  001156  0E64               	movlw	100
   988  001158  6F62               	movwf	___wmul@multiplicand& (0+255),b
   989  00115A  EC71  F00E         	call	___wmul	;wreg free
   990  00115E  C060  F066         	movff	?___wmul,___awdiv@dividend
   991  001162  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
   992  001166  0E00               	movlw	0
   993  001168  0100               	movlb	0	; () banked
   994  00116A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
   995  00116C  6968               	setf	___awdiv@divisor& (0+255),b
   996  00116E  ECD3  F00C         	call	___awdiv	;wreg free
   997  001172  C066  F034         	movff	?___awdiv,_rain
   998  001176  C067  F035         	movff	?___awdiv+1,_rain+1
   999                           
  1000                           ;PIC_ESP8266_WiFi.c: 73: ADCON0 = 0b00010001;
  1001  00117A  0E11               	movlw	17
  1002  00117C  6EC2               	movwf	4034,c	;volatile
  1003                           
  1004                           ;PIC_ESP8266_WiFi.c: 74: ADCON0bits.GO = 1;
  1005  00117E  82C2               	bsf	4034,1,c	;volatile
  1006  001180  B2C2               	btfsc	4034,1,c	;volatile
  1007  001182  D7FE               	goto	l123
  1008                           
  1009                           ;PIC_ESP8266_WiFi.c: 76: light = ADRESH;
  1010  001184  CFC4 F032          	movff	4036,_light	;volatile
  1011  001188  6A33               	clrf	_light+1,c
  1012                           
  1013                           ;PIC_ESP8266_WiFi.c: 77: light=(255-light)*100/250;
  1014  00118A  C032  F06E         	movff	_light,??_readSensor
  1015  00118E  C033  F06F         	movff	_light+1,??_readSensor+1
  1016  001192  0100               	movlb	0	; () banked
  1017  001194  1F6E               	comf	??_readSensor& (0+255),f,b
  1018  001196  1F6F               	comf	(??_readSensor+1)& (0+255),f,b
  1019  001198  4B6E               	infsnz	??_readSensor& (0+255),f,b
  1020  00119A  2B6F               	incf	(??_readSensor+1)& (0+255),f,b
  1021  00119C  0EFF               	movlw	255
  1022  00119E  256E               	addwf	??_readSensor& (0+255),w,b
  1023  0011A0  6F60               	movwf	___wmul@multiplier& (0+255),b
  1024  0011A2  0E00               	movlw	0
  1025  0011A4  216F               	addwfc	(??_readSensor+1)& (0+255),w,b
  1026  0011A6  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  1027  0011A8  0E00               	movlw	0
  1028  0011AA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1029  0011AC  0E64               	movlw	100
  1030  0011AE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1031  0011B0  EC71  F00E         	call	___wmul	;wreg free
  1032  0011B4  C060  F066         	movff	?___wmul,___awdiv@dividend
  1033  0011B8  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
  1034  0011BC  0E00               	movlw	0
  1035  0011BE  0100               	movlb	0	; () banked
  1036  0011C0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  1037  0011C2  0EFA               	movlw	250
  1038  0011C4  6F68               	movwf	___awdiv@divisor& (0+255),b
  1039  0011C6  ECD3  F00C         	call	___awdiv	;wreg free
  1040  0011CA  C066  F032         	movff	?___awdiv,_light
  1041  0011CE  C067  F033         	movff	?___awdiv+1,_light+1
  1042  0011D2  0012               	return		;funcret
  1043  0011D4                     __end_of_readSensor:
  1044                           	opt stack 0
  1045                           tblptru	equ	0xFF8
  1046                           intcon	equ	0xFF2
  1047                           postinc0	equ	0xFEE
  1048                           wreg	equ	0xFE8
  1049                           status	equ	0xFD8
  1050                           
  1051 ;; *************** function ___wmul *****************
  1052 ;; Defined at:
  1053 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1056 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;  product         2    4[BANK0 ] unsigned int 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  2    0[BANK0 ] unsigned int 
  1061 ;; Registers used:
  1062 ;;		wreg, status,2, status,0, prodl, prodh
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1068 ;;      Params:         0       4       0       0       0       0       0       0       0
  1069 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1071 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1072 ;;Total ram usage:        6 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    4
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_readSensor
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text3
  1083  001CE2                     __ptext3:
  1084                           	opt stack 0
  1085  001CE2                     ___wmul:
  1086                           	opt stack 25
  1087                           
  1088                           ;incstack = 0
  1089  001CE2  0100               	movlb	0	; () banked
  1090  001CE4  5160               	movf	___wmul@multiplier& (0+255),w,b
  1091  001CE6  0362               	mulwf	___wmul@multiplicand& (0+255),b
  1092  001CE8  CFF3 F064          	movff	prodl,___wmul@product
  1093  001CEC  CFF4 F065          	movff	prodh,___wmul@product+1
  1094  001CF0  5160               	movf	___wmul@multiplier& (0+255),w,b
  1095  001CF2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1096  001CF4  50F3               	movf	prodl,w,c
  1097  001CF6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  1098  001CF8  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1099  001CFA  0362               	mulwf	___wmul@multiplicand& (0+255),b
  1100  001CFC  50F3               	movf	prodl,w,c
  1101  001CFE  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  1102                           
  1103                           ; BSR set to: 0
  1104  001D00  C064  F060         	movff	___wmul@product,?___wmul
  1105  001D04  C065  F061         	movff	___wmul@product+1,?___wmul+1
  1106  001D08  0012               	return	
  1107  001D0A                     __end_of___wmul:
  1108                           	opt stack 0
  1109                           tblptru	equ	0xFF8
  1110                           prodh	equ	0xFF4
  1111                           prodl	equ	0xFF3
  1112                           intcon	equ	0xFF2
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           status	equ	0xFD8
  1116                           
  1117 ;; *************** function ___awdiv *****************
  1118 ;; Defined at:
  1119 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  dividend        2    6[BANK0 ] int 
  1122 ;;  divisor         2    8[BANK0 ] int 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  quotient        2   12[BANK0 ] int 
  1125 ;;  sign            1   11[BANK0 ] unsigned char 
  1126 ;;  counter         1   10[BANK0 ] unsigned char 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  2    6[BANK0 ] int 
  1129 ;; Registers used:
  1130 ;;		wreg, status,2, status,0
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1136 ;;      Params:         0       4       0       0       0       0       0       0       0
  1137 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1138 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1139 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1140 ;;Total ram usage:        8 bytes
  1141 ;; Hardware stack levels used:    1
  1142 ;; Hardware stack levels required when called:    4
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_readSensor
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           	psect	text4
  1151  0019A6                     __ptext4:
  1152                           	opt stack 0
  1153  0019A6                     ___awdiv:
  1154                           	opt stack 25
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;incstack = 0
  1158  0019A6  0E00               	movlw	0
  1159  0019A8  0100               	movlb	0	; () banked
  1160  0019AA  6F6B               	movwf	___awdiv@sign& (0+255),b
  1161                           
  1162                           ; BSR set to: 0
  1163  0019AC  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1164  0019AE  D006               	goto	l352
  1165                           
  1166                           ; BSR set to: 0
  1167  0019B0  6D68               	negf	___awdiv@divisor& (0+255),b
  1168  0019B2  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  1169  0019B4  B0D8               	btfsc	status,0,c
  1170  0019B6  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  1171                           
  1172                           ; BSR set to: 0
  1173  0019B8  0E01               	movlw	1
  1174  0019BA  6F6B               	movwf	___awdiv@sign& (0+255),b
  1175  0019BC                     l352:
  1176                           
  1177                           ; BSR set to: 0
  1178                           
  1179                           ; BSR set to: 0
  1180  0019BC  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  1181  0019BE  D006               	goto	l353
  1182                           
  1183                           ; BSR set to: 0
  1184  0019C0  6D66               	negf	___awdiv@dividend& (0+255),b
  1185  0019C2  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  1186  0019C4  B0D8               	btfsc	status,0,c
  1187  0019C6  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  1188                           
  1189                           ; BSR set to: 0
  1190  0019C8  0E01               	movlw	1
  1191  0019CA  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  1192  0019CC                     l353:
  1193                           
  1194                           ; BSR set to: 0
  1195                           
  1196                           ; BSR set to: 0
  1197  0019CC  0E00               	movlw	0
  1198  0019CE  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  1199  0019D0  0E00               	movlw	0
  1200  0019D2  6F6C               	movwf	___awdiv@quotient& (0+255),b
  1201                           
  1202                           ; BSR set to: 0
  1203  0019D4  5168               	movf	___awdiv@divisor& (0+255),w,b
  1204  0019D6  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  1205  0019D8  B4D8               	btfsc	status,2,c
  1206  0019DA  D01C               	goto	l360
  1207                           
  1208                           ; BSR set to: 0
  1209  0019DC  0E01               	movlw	1
  1210  0019DE  6F6A               	movwf	___awdiv@counter& (0+255),b
  1211  0019E0  D004               	goto	l355
  1212  0019E2                     
  1213                           ; BSR set to: 0
  1214                           
  1215                           ; BSR set to: 0
  1216  0019E2  90D8               	bcf	status,0,c
  1217  0019E4  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  1218  0019E6  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  1219  0019E8  2B6A               	incf	___awdiv@counter& (0+255),f,b
  1220  0019EA                     l355:
  1221                           
  1222                           ; BSR set to: 0
  1223                           
  1224                           ; BSR set to: 0
  1225  0019EA  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  1226  0019EC  D7FA               	goto	l356
  1227  0019EE                     u2150:
  1228                           
  1229                           ; BSR set to: 0
  1230                           
  1231                           ; BSR set to: 0
  1232                           
  1233                           ; BSR set to: 0
  1234  0019EE  90D8               	bcf	status,0,c
  1235  0019F0  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  1236  0019F2  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  1237                           
  1238                           ; BSR set to: 0
  1239  0019F4  5168               	movf	___awdiv@divisor& (0+255),w,b
  1240  0019F6  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  1241  0019F8  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1242  0019FA  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  1243  0019FC  A0D8               	btfss	status,0,c
  1244  0019FE  D005               	goto	l359
  1245                           
  1246                           ; BSR set to: 0
  1247  001A00  5168               	movf	___awdiv@divisor& (0+255),w,b
  1248  001A02  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  1249  001A04  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  1250  001A06  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  1251                           
  1252                           ; BSR set to: 0
  1253  001A08  816C               	bsf	___awdiv@quotient& (0+255),0,b
  1254  001A0A                     l359:
  1255                           
  1256                           ; BSR set to: 0
  1257                           
  1258                           ; BSR set to: 0
  1259  001A0A  90D8               	bcf	status,0,c
  1260  001A0C  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  1261  001A0E  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  1262                           
  1263                           ; BSR set to: 0
  1264  001A10  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  1265  001A12  D7ED               	goto	u2150
  1266  001A14                     l360:
  1267                           
  1268                           ; BSR set to: 0
  1269                           
  1270                           ; BSR set to: 0
  1271                           
  1272                           ; BSR set to: 0
  1273  001A14  516B               	movf	___awdiv@sign& (0+255),w,b
  1274  001A16  B4D8               	btfsc	status,2,c
  1275  001A18  D004               	goto	l361
  1276                           
  1277                           ; BSR set to: 0
  1278  001A1A  6D6C               	negf	___awdiv@quotient& (0+255),b
  1279  001A1C  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  1280  001A1E  B0D8               	btfsc	status,0,c
  1281  001A20  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  1282  001A22                     l361:
  1283                           
  1284                           ; BSR set to: 0
  1285                           
  1286                           ; BSR set to: 0
  1287  001A22  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  1288  001A26  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  1289  001A2A  0012               	return	
  1290  001A2C                     __end_of___awdiv:
  1291                           	opt stack 0
  1292                           tblptru	equ	0xFF8
  1293                           prodh	equ	0xFF4
  1294                           prodl	equ	0xFF3
  1295                           intcon	equ	0xFF2
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function _MSdelay *****************
  1301 ;; Defined at:
  1302 ;;		line 46 in file "USART_Source_File.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  val             2    0[BANK0 ] unsigned int 
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;  j               2    4[BANK0 ] unsigned int 
  1307 ;;  i               2    2[BANK0 ] unsigned int 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1317 ;;      Params:         0       2       0       0       0       0       0       0       0
  1318 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1320 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1321 ;;Total ram usage:        6 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    4
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_readSensor
  1328 ;;		_main
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text5
  1333  001C74                     __ptext5:
  1334                           	opt stack 0
  1335  001C74                     _MSdelay:
  1336                           	opt stack 25
  1337                           
  1338                           ;USART_Source_File.c: 48: unsigned int i,j;
  1339                           ;USART_Source_File.c: 49: for(i = 0; i <= val; i++)
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;incstack = 0
  1343  001C74  0E00               	movlw	0
  1344  001C76  0100               	movlb	0	; () banked
  1345  001C78  6F63               	movwf	(MSdelay@i+1)& (0+255),b
  1346  001C7A  0E00               	movlw	0
  1347  001C7C  6F62               	movwf	MSdelay@i& (0+255),b
  1348  001C7E  D00F               	goto	l44
  1349  001C80                     
  1350                           ; BSR set to: 0
  1351                           ;USART_Source_File.c: 50: for(j = 0; j < 165; j++);
  1352                           
  1353                           ; BSR set to: 0
  1354  001C80  0E00               	movlw	0
  1355  001C82  6F65               	movwf	(MSdelay@j+1)& (0+255),b
  1356  001C84  0E00               	movlw	0
  1357  001C86  6F64               	movwf	MSdelay@j& (0+255),b
  1358  001C88                     l1892:
  1359                           
  1360                           ; BSR set to: 0
  1361  001C88  5165               	movf	(MSdelay@j+1)& (0+255),w,b
  1362  001C8A  E107               	bnz	l1900
  1363  001C8C  0EA5               	movlw	165
  1364  001C8E  5D64               	subwf	MSdelay@j& (0+255),w,b
  1365  001C90  B0D8               	btfsc	status,0,c
  1366  001C92  D003               	goto	u1820
  1367                           
  1368                           ; BSR set to: 0
  1369                           
  1370                           ; BSR set to: 0
  1371                           
  1372                           ; BSR set to: 0
  1373  001C94  4B64               	infsnz	MSdelay@j& (0+255),f,b
  1374  001C96  2B65               	incf	(MSdelay@j+1)& (0+255),f,b
  1375  001C98  D7F7               	goto	l1892
  1376  001C9A                     u1820:
  1377  001C9A                     l1900:
  1378                           
  1379                           ; BSR set to: 0
  1380  001C9A  4B62               	infsnz	MSdelay@i& (0+255),f,b
  1381  001C9C  2B63               	incf	(MSdelay@i+1)& (0+255),f,b
  1382  001C9E                     l44:
  1383                           
  1384                           ; BSR set to: 0
  1385                           
  1386                           ; BSR set to: 0
  1387  001C9E  5162               	movf	MSdelay@i& (0+255),w,b
  1388  001CA0  5D60               	subwf	MSdelay@val& (0+255),w,b
  1389  001CA2  5163               	movf	(MSdelay@i+1)& (0+255),w,b
  1390  001CA4  5961               	subwfb	(MSdelay@val+1)& (0+255),w,b
  1391  001CA6  A0D8               	btfss	status,0,c
  1392  001CA8  0012               	return	
  1393  001CAA  D7EA               	goto	l45
  1394  001CAC                     __end_of_MSdelay:
  1395                           	opt stack 0
  1396                           tblptru	equ	0xFF8
  1397                           prodh	equ	0xFF4
  1398                           prodl	equ	0xFF3
  1399                           intcon	equ	0xFF2
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _USART_Init *****************
  1405 ;; Defined at:
  1406 ;;		line 8 in file "USART_Source_File.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  baud_rate       4   60[BANK0 ] long 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;		None
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, status,2, status,0, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1420 ;;      Params:         0       4       0       0       0       0       0       0       0
  1421 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1423 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1424 ;;Total ram usage:        4 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    6
  1427 ;; This function calls:
  1428 ;;		___altoft
  1429 ;;		___ftadd
  1430 ;;		___ftdiv
  1431 ;;		___fttol
  1432 ;; This function is called by:
  1433 ;;		_main
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text6
  1438  001AA6                     __ptext6:
  1439                           	opt stack 0
  1440  001AA6                     _USART_Init:
  1441                           	opt stack 24
  1442                           
  1443                           ;USART_Source_File.c: 10: TRISC6 = 0;
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;incstack = 0
  1447  001AA6  9C94               	bcf	3988,6,c	;volatile
  1448                           
  1449                           ;USART_Source_File.c: 11: TRISC7 = 1;
  1450  001AA8  8E94               	bsf	3988,7,c	;volatile
  1451                           
  1452                           ;USART_Source_File.c: 12: SPBRG = (int)(((float)(8000000/4)/(float)baud_rate)-1);
  1453  001AAA  0E00               	movlw	0
  1454  001AAC  0100               	movlb	0	; () banked
  1455  001AAE  6F84               	movwf	___ftadd@f2& (0+255),b
  1456  001AB0  0E80               	movlw	128
  1457  001AB2  6F85               	movwf	(___ftadd@f2+1)& (0+255),b
  1458  001AB4  0EBF               	movlw	191
  1459  001AB6  6F86               	movwf	(___ftadd@f2+2)& (0+255),b
  1460  001AB8  C09C  F068         	movff	USART_Init@baud_rate,___altoft@c
  1461  001ABC  C09D  F069         	movff	USART_Init@baud_rate+1,___altoft@c+1
  1462  001AC0  C09E  F06A         	movff	USART_Init@baud_rate+2,___altoft@c+2
  1463  001AC4  C09F  F06B         	movff	USART_Init@baud_rate+3,___altoft@c+3
  1464  001AC8  EC16  F00D         	call	___altoft	;wreg free
  1465  001ACC  C068  F075         	movff	?___altoft,___ftdiv@f2
  1466  001AD0  C069  F076         	movff	?___altoft+1,___ftdiv@f2+1
  1467  001AD4  C06A  F077         	movff	?___altoft+2,___ftdiv@f2+2
  1468  001AD8  0E24               	movlw	36
  1469  001ADA  0100               	movlb	0	; () banked
  1470  001ADC  6F72               	movwf	___ftdiv@f1& (0+255),b
  1471  001ADE  0EF4               	movlw	244
  1472  001AE0  6F73               	movwf	(___ftdiv@f1+1)& (0+255),b
  1473  001AE2  0E49               	movlw	73
  1474  001AE4  6F74               	movwf	(___ftdiv@f1+2)& (0+255),b
  1475  001AE6  EC64  F00B         	call	___ftdiv	;wreg free
  1476  001AEA  C072  F081         	movff	?___ftdiv,___ftadd@f1
  1477  001AEE  C073  F082         	movff	?___ftdiv+1,___ftadd@f1+1
  1478  001AF2  C074  F083         	movff	?___ftdiv+2,___ftadd@f1+2
  1479  001AF6  ECEA  F008         	call	___ftadd	;wreg free
  1480  001AFA  C081  F08D         	movff	?___ftadd,___fttol@f1
  1481  001AFE  C082  F08E         	movff	?___ftadd+1,___fttol@f1+1
  1482  001B02  C083  F08F         	movff	?___ftadd+2,___fttol@f1+2
  1483  001B06  ECE8  F00A         	call	___fttol	;wreg free
  1484  001B0A  0100               	movlb	0	; () banked
  1485  001B0C  518D               	movf	?___fttol& (0+255),w,b
  1486  001B0E  6EAF               	movwf	4015,c	;volatile
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;USART_Source_File.c: 14: TXSTA = 0x24;
  1490  001B10  0E24               	movlw	36
  1491  001B12  6EAC               	movwf	4012,c	;volatile
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;USART_Source_File.c: 15: BAUDCON = 0x08;
  1495  001B14  0E08               	movlw	8
  1496  001B16  6EB8               	movwf	4024,c	;volatile
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;USART_Source_File.c: 19: RCSTA = 0x90;
  1500  001B18  0E90               	movlw	144
  1501  001B1A  6EAB               	movwf	4011,c	;volatile
  1502                           
  1503                           ; BSR set to: 0
  1504  001B1C  0012               	return		;funcret
  1505  001B1E                     __end_of_USART_Init:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           prodh	equ	0xFF4
  1509                           prodl	equ	0xFF3
  1510                           intcon	equ	0xFF2
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function ___fttol *****************
  1516 ;; Defined at:
  1517 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;  f1              3   45[BANK0 ] float 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  lval            4   55[BANK0 ] unsigned long 
  1522 ;;  exp1            1   59[BANK0 ] unsigned char 
  1523 ;;  sign1           1   54[BANK0 ] unsigned char 
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  4   45[BANK0 ] long 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2, status,0
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1533 ;;      Params:         0       4       0       0       0       0       0       0       0
  1534 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1535 ;;      Temps:          0       5       0       0       0       0       0       0       0
  1536 ;;      Totals:         0      15       0       0       0       0       0       0       0
  1537 ;;Total ram usage:       15 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    4
  1540 ;; This function calls:
  1541 ;;		Nothing
  1542 ;; This function is called by:
  1543 ;;		_USART_Init
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	text7
  1548  0015D0                     __ptext7:
  1549                           	opt stack 0
  1550  0015D0                     ___fttol:
  1551                           	opt stack 25
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;incstack = 0
  1555  0015D0  C08F  F091         	movff	___fttol@f1+2,??___fttol
  1556  0015D4  0100               	movlb	0	; () banked
  1557  0015D6  6B92               	clrf	(??___fttol+1)& (0+255),b
  1558  0015D8  6B93               	clrf	(??___fttol+2)& (0+255),b
  1559  0015DA  358E               	rlcf	(___fttol@f1+1)& (0+255),w,b
  1560  0015DC  3791               	rlcf	??___fttol& (0+255),f,b
  1561  0015DE  E301               	bnc	u1501
  1562  0015E0  8192               	bsf	(??___fttol+1)& (0+255),0,b
  1563  0015E2                     u1501:
  1564  0015E2  5191               	movf	??___fttol& (0+255),w,b
  1565  0015E4  6F9B               	movwf	___fttol@exp1& (0+255),b
  1566  0015E6  519B               	movf	___fttol@exp1& (0+255),w,b
  1567  0015E8  A4D8               	btfss	status,2,c
  1568  0015EA  D009               	goto	l499
  1569                           
  1570                           ; BSR set to: 0
  1571  0015EC  0E00               	movlw	0
  1572  0015EE  6F8D               	movwf	?___fttol& (0+255),b
  1573  0015F0  0E00               	movlw	0
  1574  0015F2  6F8E               	movwf	(?___fttol+1)& (0+255),b
  1575  0015F4  0E00               	movlw	0
  1576  0015F6  6F8F               	movwf	(?___fttol+2)& (0+255),b
  1577  0015F8  0E00               	movlw	0
  1578  0015FA  6F90               	movwf	(?___fttol+3)& (0+255),b
  1579                           
  1580                           ; BSR set to: 0
  1581  0015FC  0012               	return	
  1582  0015FE                     l499:
  1583                           
  1584                           ; BSR set to: 0
  1585                           
  1586                           ; BSR set to: 0
  1587  0015FE  0E17               	movlw	23
  1588  001600  6F91               	movwf	??___fttol& (0+255),b
  1589  001602  C08D  F092         	movff	___fttol@f1,??___fttol+1
  1590  001606  C08E  F093         	movff	___fttol@f1+1,??___fttol+2
  1591  00160A  C08F  F094         	movff	___fttol@f1+2,??___fttol+3
  1592  00160E  2991               	incf	??___fttol& (0+255),w,b
  1593  001610  6F95               	movwf	(??___fttol+4)& (0+255),b
  1594  001612  D004               	goto	u1520
  1595  001614                     u1525:
  1596  001614  90D8               	bcf	status,0,c
  1597  001616  3394               	rrcf	(??___fttol+3)& (0+255),f,b
  1598  001618  3393               	rrcf	(??___fttol+2)& (0+255),f,b
  1599  00161A  3392               	rrcf	(??___fttol+1)& (0+255),f,b
  1600  00161C                     u1520:
  1601  00161C  2F95               	decfsz	(??___fttol+4)& (0+255),f,b
  1602  00161E  D7FA               	goto	u1525
  1603  001620  0100               	movlb	0	; () banked
  1604  001622  5192               	movf	(??___fttol+1)& (0+255),w,b
  1605  001624  6F96               	movwf	___fttol@sign1& (0+255),b
  1606                           
  1607                           ; BSR set to: 0
  1608  001626  8F8E               	bsf	(___fttol@f1+1)& (0+255),7,b
  1609                           
  1610                           ; BSR set to: 0
  1611  001628  0EFF               	movlw	255
  1612  00162A  178D               	andwf	___fttol@f1& (0+255),f,b
  1613  00162C  0EFF               	movlw	255
  1614  00162E  178E               	andwf	(___fttol@f1+1)& (0+255),f,b
  1615  001630  0E00               	movlw	0
  1616  001632  178F               	andwf	(___fttol@f1+2)& (0+255),f,b
  1617                           
  1618                           ; BSR set to: 0
  1619  001634  518D               	movf	___fttol@f1& (0+255),w,b
  1620  001636  6F97               	movwf	___fttol@lval& (0+255),b
  1621  001638  518E               	movf	(___fttol@f1+1)& (0+255),w,b
  1622  00163A  6F98               	movwf	(___fttol@lval+1)& (0+255),b
  1623  00163C  518F               	movf	(___fttol@f1+2)& (0+255),w,b
  1624  00163E  6F99               	movwf	(___fttol@lval+2)& (0+255),b
  1625  001640  6B9A               	clrf	(___fttol@lval+3)& (0+255),b
  1626                           
  1627                           ; BSR set to: 0
  1628  001642  0E8E               	movlw	142
  1629  001644  5F9B               	subwf	___fttol@exp1& (0+255),f,b
  1630                           
  1631                           ; BSR set to: 0
  1632  001646  AF9B               	btfss	___fttol@exp1& (0+255),7,b
  1633  001648  D016               	goto	l501
  1634                           
  1635                           ; BSR set to: 0
  1636  00164A  519B               	movf	___fttol@exp1& (0+255),w,b
  1637  00164C  0A80               	xorlw	128
  1638  00164E  0F8F               	addlw	143
  1639  001650  B0D8               	btfsc	status,0,c
  1640  001652  D009               	goto	l502
  1641                           
  1642                           ; BSR set to: 0
  1643  001654  0E00               	movlw	0
  1644  001656  6F8D               	movwf	?___fttol& (0+255),b
  1645  001658  0E00               	movlw	0
  1646  00165A  6F8E               	movwf	(?___fttol+1)& (0+255),b
  1647  00165C  0E00               	movlw	0
  1648  00165E  6F8F               	movwf	(?___fttol+2)& (0+255),b
  1649  001660  0E00               	movlw	0
  1650  001662  6F90               	movwf	(?___fttol+3)& (0+255),b
  1651                           
  1652                           ; BSR set to: 0
  1653  001664  0012               	return	
  1654  001666                     l502:
  1655                           
  1656                           ; BSR set to: 0
  1657                           
  1658                           ; BSR set to: 0
  1659                           
  1660                           ; BSR set to: 0
  1661  001666  90D8               	bcf	status,0,c
  1662  001668  339A               	rrcf	(___fttol@lval+3)& (0+255),f,b
  1663  00166A  3399               	rrcf	(___fttol@lval+2)& (0+255),f,b
  1664  00166C  3398               	rrcf	(___fttol@lval+1)& (0+255),f,b
  1665  00166E  3397               	rrcf	___fttol@lval& (0+255),f,b
  1666                           
  1667                           ; BSR set to: 0
  1668  001670  3F9B               	incfsz	___fttol@exp1& (0+255),f,b
  1669  001672  D7F9               	goto	l502
  1670                           
  1671                           ; BSR set to: 0
  1672  001674  D015               	goto	u1560
  1673  001676                     l501:
  1674                           
  1675                           ; BSR set to: 0
  1676                           
  1677                           ; BSR set to: 0
  1678  001676  0E17               	movlw	23
  1679  001678  659B               	cpfsgt	___fttol@exp1& (0+255),b
  1680  00167A  D00F               	goto	l507
  1681                           
  1682                           ; BSR set to: 0
  1683  00167C  0E00               	movlw	0
  1684  00167E  6F8D               	movwf	?___fttol& (0+255),b
  1685  001680  0E00               	movlw	0
  1686  001682  6F8E               	movwf	(?___fttol+1)& (0+255),b
  1687  001684  0E00               	movlw	0
  1688  001686  6F8F               	movwf	(?___fttol+2)& (0+255),b
  1689  001688  0E00               	movlw	0
  1690  00168A  6F90               	movwf	(?___fttol+3)& (0+255),b
  1691                           
  1692                           ; BSR set to: 0
  1693  00168C  0012               	return	
  1694  00168E                     
  1695                           ; BSR set to: 0
  1696                           
  1697                           ; BSR set to: 0
  1698  00168E  90D8               	bcf	status,0,c
  1699  001690  3797               	rlcf	___fttol@lval& (0+255),f,b
  1700  001692  3798               	rlcf	(___fttol@lval+1)& (0+255),f,b
  1701  001694  3799               	rlcf	(___fttol@lval+2)& (0+255),f,b
  1702  001696  379A               	rlcf	(___fttol@lval+3)& (0+255),f,b
  1703  001698  079B               	decf	___fttol@exp1& (0+255),f,b
  1704  00169A                     l507:
  1705                           
  1706                           ; BSR set to: 0
  1707                           
  1708                           ; BSR set to: 0
  1709  00169A  519B               	movf	___fttol@exp1& (0+255),w,b
  1710  00169C  A4D8               	btfss	status,2,c
  1711  00169E  D7F7               	goto	l508
  1712  0016A0                     u1560:
  1713                           
  1714                           ; BSR set to: 0
  1715                           
  1716                           ; BSR set to: 0
  1717                           
  1718                           ; BSR set to: 0
  1719  0016A0  5196               	movf	___fttol@sign1& (0+255),w,b
  1720  0016A2  B4D8               	btfsc	status,2,c
  1721  0016A4  D008               	goto	l510
  1722                           
  1723                           ; BSR set to: 0
  1724  0016A6  1F9A               	comf	(___fttol@lval+3)& (0+255),f,b
  1725  0016A8  1F99               	comf	(___fttol@lval+2)& (0+255),f,b
  1726  0016AA  1F98               	comf	(___fttol@lval+1)& (0+255),f,b
  1727  0016AC  6D97               	negf	___fttol@lval& (0+255),b
  1728  0016AE  0E00               	movlw	0
  1729  0016B0  2398               	addwfc	(___fttol@lval+1)& (0+255),f,b
  1730  0016B2  2399               	addwfc	(___fttol@lval+2)& (0+255),f,b
  1731  0016B4  239A               	addwfc	(___fttol@lval+3)& (0+255),f,b
  1732  0016B6                     l510:
  1733                           
  1734                           ; BSR set to: 0
  1735                           
  1736                           ; BSR set to: 0
  1737  0016B6  C097  F08D         	movff	___fttol@lval,?___fttol
  1738  0016BA  C098  F08E         	movff	___fttol@lval+1,?___fttol+1
  1739  0016BE  C099  F08F         	movff	___fttol@lval+2,?___fttol+2
  1740  0016C2  C09A  F090         	movff	___fttol@lval+3,?___fttol+3
  1741  0016C6  0012               	return	
  1742  0016C8                     __end_of___fttol:
  1743                           	opt stack 0
  1744                           tblptru	equ	0xFF8
  1745                           prodh	equ	0xFF4
  1746                           prodl	equ	0xFF3
  1747                           intcon	equ	0xFF2
  1748                           postinc0	equ	0xFEE
  1749                           wreg	equ	0xFE8
  1750                           status	equ	0xFD8
  1751                           
  1752 ;; *************** function ___ftdiv *****************
  1753 ;; Defined at:
  1754 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  f1              3   18[BANK0 ] float 
  1757 ;;  f2              3   21[BANK0 ] float 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  f3              3   28[BANK0 ] float 
  1760 ;;  sign            1   32[BANK0 ] unsigned char 
  1761 ;;  exp             1   31[BANK0 ] unsigned char 
  1762 ;;  cntr            1   27[BANK0 ] unsigned char 
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  3   18[BANK0 ] float 
  1765 ;; Registers used:
  1766 ;;		wreg, status,2, status,0, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1772 ;;      Params:         0       6       0       0       0       0       0       0       0
  1773 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1774 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1775 ;;      Totals:         0      15       0       0       0       0       0       0       0
  1776 ;;Total ram usage:       15 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    5
  1779 ;; This function calls:
  1780 ;;		___ftpack
  1781 ;; This function is called by:
  1782 ;;		_USART_Init
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text8
  1787  0016C8                     __ptext8:
  1788                           	opt stack 0
  1789  0016C8                     ___ftdiv:
  1790                           	opt stack 24
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;incstack = 0
  1794  0016C8  C074  F078         	movff	___ftdiv@f1+2,??___ftdiv
  1795  0016CC  0100               	movlb	0	; () banked
  1796  0016CE  6B79               	clrf	(??___ftdiv+1)& (0+255),b
  1797  0016D0  6B7A               	clrf	(??___ftdiv+2)& (0+255),b
  1798  0016D2  3573               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  1799  0016D4  3778               	rlcf	??___ftdiv& (0+255),f,b
  1800  0016D6  E301               	bnc	u2071
  1801  0016D8  8179               	bsf	(??___ftdiv+1)& (0+255),0,b
  1802  0016DA                     u2071:
  1803  0016DA  5178               	movf	??___ftdiv& (0+255),w,b
  1804  0016DC  6F7F               	movwf	___ftdiv@exp& (0+255),b
  1805  0016DE  517F               	movf	___ftdiv@exp& (0+255),w,b
  1806  0016E0  A4D8               	btfss	status,2,c
  1807  0016E2  D007               	goto	l463
  1808                           
  1809                           ; BSR set to: 0
  1810  0016E4  0E00               	movlw	0
  1811  0016E6  6F72               	movwf	?___ftdiv& (0+255),b
  1812  0016E8  0E00               	movlw	0
  1813  0016EA  6F73               	movwf	(?___ftdiv+1)& (0+255),b
  1814  0016EC  0E00               	movlw	0
  1815  0016EE  6F74               	movwf	(?___ftdiv+2)& (0+255),b
  1816                           
  1817                           ; BSR set to: 0
  1818  0016F0  0012               	return	
  1819  0016F2                     l463:
  1820                           
  1821                           ; BSR set to: 0
  1822                           
  1823                           ; BSR set to: 0
  1824  0016F2  C077  F078         	movff	___ftdiv@f2+2,??___ftdiv
  1825  0016F6  6B79               	clrf	(??___ftdiv+1)& (0+255),b
  1826  0016F8  6B7A               	clrf	(??___ftdiv+2)& (0+255),b
  1827  0016FA  3576               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  1828  0016FC  3778               	rlcf	??___ftdiv& (0+255),f,b
  1829  0016FE  E301               	bnc	u2091
  1830  001700  8179               	bsf	(??___ftdiv+1)& (0+255),0,b
  1831  001702                     u2091:
  1832  001702  5178               	movf	??___ftdiv& (0+255),w,b
  1833  001704  6F80               	movwf	___ftdiv@sign& (0+255),b
  1834  001706  5180               	movf	___ftdiv@sign& (0+255),w,b
  1835  001708  A4D8               	btfss	status,2,c
  1836  00170A  D007               	goto	l465
  1837                           
  1838                           ; BSR set to: 0
  1839  00170C  0E00               	movlw	0
  1840  00170E  6F72               	movwf	?___ftdiv& (0+255),b
  1841  001710  0E00               	movlw	0
  1842  001712  6F73               	movwf	(?___ftdiv+1)& (0+255),b
  1843  001714  0E00               	movlw	0
  1844  001716  6F74               	movwf	(?___ftdiv+2)& (0+255),b
  1845                           
  1846                           ; BSR set to: 0
  1847  001718  0012               	return	
  1848  00171A                     l465:
  1849                           
  1850                           ; BSR set to: 0
  1851                           
  1852                           ; BSR set to: 0
  1853  00171A  0E00               	movlw	0
  1854  00171C  6F7C               	movwf	___ftdiv@f3& (0+255),b
  1855  00171E  0E00               	movlw	0
  1856  001720  6F7D               	movwf	(___ftdiv@f3+1)& (0+255),b
  1857  001722  0E00               	movlw	0
  1858  001724  6F7E               	movwf	(___ftdiv@f3+2)& (0+255),b
  1859                           
  1860                           ; BSR set to: 0
  1861  001726  5180               	movf	___ftdiv@sign& (0+255),w,b
  1862  001728  0F89               	addlw	137
  1863  00172A  5F7F               	subwf	___ftdiv@exp& (0+255),f,b
  1864                           
  1865                           ; BSR set to: 0
  1866  00172C  C074  F080         	movff	___ftdiv@f1+2,___ftdiv@sign
  1867                           
  1868                           ; BSR set to: 0
  1869  001730  5177               	movf	(___ftdiv@f2+2)& (0+255),w,b
  1870  001732  1B80               	xorwf	___ftdiv@sign& (0+255),f,b
  1871                           
  1872                           ; BSR set to: 0
  1873  001734  0E80               	movlw	128
  1874  001736  1780               	andwf	___ftdiv@sign& (0+255),f,b
  1875                           
  1876                           ; BSR set to: 0
  1877  001738  8F73               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  1878                           
  1879                           ; BSR set to: 0
  1880  00173A  0EFF               	movlw	255
  1881  00173C  1772               	andwf	___ftdiv@f1& (0+255),f,b
  1882  00173E  0EFF               	movlw	255
  1883  001740  1773               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  1884  001742  0E00               	movlw	0
  1885  001744  1774               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  1886                           
  1887                           ; BSR set to: 0
  1888  001746  8F76               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  1889                           
  1890                           ; BSR set to: 0
  1891  001748  0EFF               	movlw	255
  1892  00174A  1775               	andwf	___ftdiv@f2& (0+255),f,b
  1893  00174C  0EFF               	movlw	255
  1894  00174E  1776               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  1895  001750  0E00               	movlw	0
  1896  001752  1777               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  1897                           
  1898                           ; BSR set to: 0
  1899  001754  0E18               	movlw	24
  1900  001756  6F7B               	movwf	___ftdiv@cntr& (0+255),b
  1901  001758                     
  1902                           ; BSR set to: 0
  1903                           
  1904                           ; BSR set to: 0
  1905  001758  90D8               	bcf	status,0,c
  1906  00175A  377C               	rlcf	___ftdiv@f3& (0+255),f,b
  1907  00175C  377D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  1908  00175E  377E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  1909                           
  1910                           ; BSR set to: 0
  1911  001760  5175               	movf	___ftdiv@f2& (0+255),w,b
  1912  001762  5D72               	subwf	___ftdiv@f1& (0+255),w,b
  1913  001764  5176               	movf	(___ftdiv@f2+1)& (0+255),w,b
  1914  001766  5973               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  1915  001768  5177               	movf	(___ftdiv@f2+2)& (0+255),w,b
  1916  00176A  5974               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  1917  00176C  A0D8               	btfss	status,0,c
  1918  00176E  D007               	goto	l467
  1919                           
  1920                           ; BSR set to: 0
  1921  001770  5175               	movf	___ftdiv@f2& (0+255),w,b
  1922  001772  5F72               	subwf	___ftdiv@f1& (0+255),f,b
  1923  001774  5176               	movf	(___ftdiv@f2+1)& (0+255),w,b
  1924  001776  5B73               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  1925  001778  5177               	movf	(___ftdiv@f2+2)& (0+255),w,b
  1926  00177A  5B74               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  1927                           
  1928                           ; BSR set to: 0
  1929  00177C  817C               	bsf	___ftdiv@f3& (0+255),0,b
  1930  00177E                     l467:
  1931                           
  1932                           ; BSR set to: 0
  1933  00177E  90D8               	bcf	status,0,c
  1934  001780  3772               	rlcf	___ftdiv@f1& (0+255),f,b
  1935  001782  3773               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  1936  001784  3774               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  1937                           
  1938                           ; BSR set to: 0
  1939  001786  2F7B               	decfsz	___ftdiv@cntr& (0+255),f,b
  1940  001788  D7E7               	goto	l466
  1941                           
  1942                           ; BSR set to: 0
  1943                           
  1944                           ; BSR set to: 0
  1945  00178A  C07C  F060         	movff	___ftdiv@f3,___ftpack@arg
  1946  00178E  C07D  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
  1947  001792  C07E  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
  1948  001796  C07F  F063         	movff	___ftdiv@exp,___ftpack@exp
  1949  00179A  C080  F064         	movff	___ftdiv@sign,___ftpack@sign
  1950  00179E  EC37  F00C         	call	___ftpack	;wreg free
  1951  0017A2  C060  F072         	movff	?___ftpack,?___ftdiv
  1952  0017A6  C061  F073         	movff	?___ftpack+1,?___ftdiv+1
  1953  0017AA  C062  F074         	movff	?___ftpack+2,?___ftdiv+2
  1954  0017AE  0012               	return	
  1955  0017B0                     __end_of___ftdiv:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           prodh	equ	0xFF4
  1959                           prodl	equ	0xFF3
  1960                           intcon	equ	0xFF2
  1961                           postinc0	equ	0xFEE
  1962                           wreg	equ	0xFE8
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function ___ftadd *****************
  1966 ;; Defined at:
  1967 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  f1              3   33[BANK0 ] float 
  1970 ;;  f2              3   36[BANK0 ] float 
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;  exp1            1   44[BANK0 ] unsigned char 
  1973 ;;  exp2            1   43[BANK0 ] unsigned char 
  1974 ;;  sign            1   42[BANK0 ] unsigned char 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  3   33[BANK0 ] float 
  1977 ;; Registers used:
  1978 ;;		wreg, status,2, status,0, cstack
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1984 ;;      Params:         0       6       0       0       0       0       0       0       0
  1985 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1986 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1987 ;;      Totals:         0      12       0       0       0       0       0       0       0
  1988 ;;Total ram usage:       12 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    5
  1991 ;; This function calls:
  1992 ;;		___ftpack
  1993 ;; This function is called by:
  1994 ;;		_USART_Init
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text9
  1999  0011D4                     __ptext9:
  2000                           	opt stack 0
  2001  0011D4                     ___ftadd:
  2002                           	opt stack 24
  2003                           
  2004                           ;incstack = 0
  2005  0011D4  C083  F087         	movff	___ftadd@f1+2,??___ftadd
  2006  0011D8  0100               	movlb	0	; () banked
  2007  0011DA  6B88               	clrf	(??___ftadd+1)& (0+255),b
  2008  0011DC  6B89               	clrf	(??___ftadd+2)& (0+255),b
  2009  0011DE  3582               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  2010  0011E0  3787               	rlcf	??___ftadd& (0+255),f,b
  2011  0011E2  E301               	bnc	u1861
  2012  0011E4  8188               	bsf	(??___ftadd+1)& (0+255),0,b
  2013  0011E6                     u1861:
  2014  0011E6  5187               	movf	??___ftadd& (0+255),w,b
  2015  0011E8  6F8C               	movwf	___ftadd@exp1& (0+255),b
  2016  0011EA  C086  F087         	movff	___ftadd@f2+2,??___ftadd
  2017  0011EE  6B88               	clrf	(??___ftadd+1)& (0+255),b
  2018  0011F0  6B89               	clrf	(??___ftadd+2)& (0+255),b
  2019  0011F2  3585               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  2020  0011F4  3787               	rlcf	??___ftadd& (0+255),f,b
  2021  0011F6  E301               	bnc	u1871
  2022  0011F8  8188               	bsf	(??___ftadd+1)& (0+255),0,b
  2023  0011FA                     u1871:
  2024  0011FA  5187               	movf	??___ftadd& (0+255),w,b
  2025  0011FC  6F8B               	movwf	___ftadd@exp2& (0+255),b
  2026                           
  2027                           ; BSR set to: 0
  2028  0011FE  518C               	movf	___ftadd@exp1& (0+255),w,b
  2029  001200  B4D8               	btfsc	status,2,c
  2030  001202  D00B               	goto	u1900
  2031                           
  2032                           ; BSR set to: 0
  2033  001204  518B               	movf	___ftadd@exp2& (0+255),w,b
  2034  001206  5D8C               	subwf	___ftadd@exp1& (0+255),w,b
  2035  001208  B0D8               	btfsc	status,0,c
  2036  00120A  D00E               	goto	l430
  2037                           
  2038                           ; BSR set to: 0
  2039  00120C  518C               	movf	___ftadd@exp1& (0+255),w,b
  2040  00120E  0800               	sublw	0
  2041  001210  258B               	addwf	___ftadd@exp2& (0+255),w,b
  2042  001212  6F87               	movwf	??___ftadd& (0+255),b
  2043  001214  0E18               	movlw	24
  2044  001216  6587               	cpfsgt	??___ftadd& (0+255),b
  2045  001218  D007               	goto	l430
  2046  00121A                     u1900:
  2047                           
  2048                           ; BSR set to: 0
  2049  00121A  C084  F081         	movff	___ftadd@f2,?___ftadd
  2050  00121E  C085  F082         	movff	___ftadd@f2+1,?___ftadd+1
  2051  001222  C086  F083         	movff	___ftadd@f2+2,?___ftadd+2
  2052  001226  0012               	return	
  2053  001228                     l430:
  2054                           
  2055                           ; BSR set to: 0
  2056                           
  2057                           ; BSR set to: 0
  2058  001228  518B               	movf	___ftadd@exp2& (0+255),w,b
  2059  00122A  B4D8               	btfsc	status,2,c
  2060  00122C  D00B               	goto	u1930
  2061                           
  2062                           ; BSR set to: 0
  2063  00122E  518C               	movf	___ftadd@exp1& (0+255),w,b
  2064  001230  5D8B               	subwf	___ftadd@exp2& (0+255),w,b
  2065  001232  B0D8               	btfsc	status,0,c
  2066  001234  D00E               	goto	l434
  2067                           
  2068                           ; BSR set to: 0
  2069  001236  518B               	movf	___ftadd@exp2& (0+255),w,b
  2070  001238  0800               	sublw	0
  2071  00123A  258C               	addwf	___ftadd@exp1& (0+255),w,b
  2072  00123C  6F87               	movwf	??___ftadd& (0+255),b
  2073  00123E  0E18               	movlw	24
  2074  001240  6587               	cpfsgt	??___ftadd& (0+255),b
  2075  001242  D007               	goto	l434
  2076  001244                     u1930:
  2077                           
  2078                           ; BSR set to: 0
  2079  001244  C081  F081         	movff	___ftadd@f1,?___ftadd
  2080  001248  C082  F082         	movff	___ftadd@f1+1,?___ftadd+1
  2081  00124C  C083  F083         	movff	___ftadd@f1+2,?___ftadd+2
  2082  001250  0012               	return	
  2083  001252                     l434:
  2084                           
  2085                           ; BSR set to: 0
  2086                           
  2087                           ; BSR set to: 0
  2088  001252  0E06               	movlw	6
  2089  001254  6F8A               	movwf	___ftadd@sign& (0+255),b
  2090                           
  2091                           ; BSR set to: 0
  2092  001256  BF83               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  2093                           
  2094                           ; BSR set to: 0
  2095  001258  8F8A               	bsf	___ftadd@sign& (0+255),7,b
  2096                           
  2097                           ; BSR set to: 0
  2098                           
  2099                           ; BSR set to: 0
  2100  00125A  BF86               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  2101                           
  2102                           ; BSR set to: 0
  2103  00125C  8D8A               	bsf	___ftadd@sign& (0+255),6,b
  2104                           
  2105                           ; BSR set to: 0
  2106  00125E  8F82               	bsf	(___ftadd@f1+1)& (0+255),7,b
  2107                           
  2108                           ; BSR set to: 0
  2109  001260  0EFF               	movlw	255
  2110  001262  1781               	andwf	___ftadd@f1& (0+255),f,b
  2111  001264  0EFF               	movlw	255
  2112  001266  1782               	andwf	(___ftadd@f1+1)& (0+255),f,b
  2113  001268  0E00               	movlw	0
  2114  00126A  1783               	andwf	(___ftadd@f1+2)& (0+255),f,b
  2115  00126C  8F85               	bsf	(___ftadd@f2+1)& (0+255),7,b
  2116                           
  2117                           ; BSR set to: 0
  2118  00126E  0EFF               	movlw	255
  2119  001270  1784               	andwf	___ftadd@f2& (0+255),f,b
  2120  001272  0EFF               	movlw	255
  2121  001274  1785               	andwf	(___ftadd@f2+1)& (0+255),f,b
  2122  001276  0E00               	movlw	0
  2123  001278  1786               	andwf	(___ftadd@f2+2)& (0+255),f,b
  2124                           
  2125                           ; BSR set to: 0
  2126  00127A  518B               	movf	___ftadd@exp2& (0+255),w,b
  2127  00127C  5D8C               	subwf	___ftadd@exp1& (0+255),w,b
  2128  00127E  B0D8               	btfsc	status,0,c
  2129  001280  D01B               	goto	l439
  2130  001282                     u1960:
  2131                           
  2132                           ; BSR set to: 0
  2133                           
  2134                           ; BSR set to: 0
  2135  001282  90D8               	bcf	status,0,c
  2136  001284  3784               	rlcf	___ftadd@f2& (0+255),f,b
  2137  001286  3785               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  2138  001288  3786               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  2139  00128A  078B               	decf	___ftadd@exp2& (0+255),f,b
  2140                           
  2141                           ; BSR set to: 0
  2142  00128C  518C               	movf	___ftadd@exp1& (0+255),w,b
  2143  00128E  198B               	xorwf	___ftadd@exp2& (0+255),w,b
  2144  001290  B4D8               	btfsc	status,2,c
  2145  001292  D00D               	goto	l444
  2146                           
  2147                           ; BSR set to: 0
  2148  001294  078A               	decf	___ftadd@sign& (0+255),f,b
  2149  001296  C08A  F087         	movff	___ftadd@sign,??___ftadd
  2150  00129A  0E07               	movlw	7
  2151  00129C  1787               	andwf	??___ftadd& (0+255),f,b
  2152  00129E  B4D8               	btfsc	status,2,c
  2153  0012A0  D006               	goto	l444
  2154  0012A2  D7EF               	goto	u1960
  2155  0012A4                     
  2156                           ; BSR set to: 0
  2157                           
  2158                           ; BSR set to: 0
  2159  0012A4  90D8               	bcf	status,0,c
  2160  0012A6  3383               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  2161  0012A8  3382               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  2162  0012AA  3381               	rrcf	___ftadd@f1& (0+255),f,b
  2163  0012AC  2B8C               	incf	___ftadd@exp1& (0+255),f,b
  2164  0012AE                     l444:
  2165                           
  2166                           ; BSR set to: 0
  2167                           
  2168                           ; BSR set to: 0
  2169  0012AE  518B               	movf	___ftadd@exp2& (0+255),w,b
  2170  0012B0  198C               	xorwf	___ftadd@exp1& (0+255),w,b
  2171  0012B2  B4D8               	btfsc	status,2,c
  2172  0012B4  D01F               	goto	u2030
  2173  0012B6  D7F6               	goto	l445
  2174  0012B8                     l439:
  2175                           
  2176                           ; BSR set to: 0
  2177                           
  2178                           ; BSR set to: 0
  2179  0012B8  518C               	movf	___ftadd@exp1& (0+255),w,b
  2180  0012BA  5D8B               	subwf	___ftadd@exp2& (0+255),w,b
  2181  0012BC  B0D8               	btfsc	status,0,c
  2182  0012BE  D01A               	goto	u2030
  2183  0012C0                     u2000:
  2184                           
  2185                           ; BSR set to: 0
  2186                           
  2187                           ; BSR set to: 0
  2188  0012C0  90D8               	bcf	status,0,c
  2189  0012C2  3781               	rlcf	___ftadd@f1& (0+255),f,b
  2190  0012C4  3782               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  2191  0012C6  3783               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  2192  0012C8  078C               	decf	___ftadd@exp1& (0+255),f,b
  2193                           
  2194                           ; BSR set to: 0
  2195  0012CA  518C               	movf	___ftadd@exp1& (0+255),w,b
  2196  0012CC  198B               	xorwf	___ftadd@exp2& (0+255),w,b
  2197  0012CE  B4D8               	btfsc	status,2,c
  2198  0012D0  D00D               	goto	l453
  2199                           
  2200                           ; BSR set to: 0
  2201  0012D2  078A               	decf	___ftadd@sign& (0+255),f,b
  2202  0012D4  C08A  F087         	movff	___ftadd@sign,??___ftadd
  2203  0012D8  0E07               	movlw	7
  2204  0012DA  1787               	andwf	??___ftadd& (0+255),f,b
  2205  0012DC  B4D8               	btfsc	status,2,c
  2206  0012DE  D006               	goto	l453
  2207  0012E0  D7EF               	goto	u2000
  2208  0012E2                     
  2209                           ; BSR set to: 0
  2210                           
  2211                           ; BSR set to: 0
  2212  0012E2  90D8               	bcf	status,0,c
  2213  0012E4  3386               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  2214  0012E6  3385               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  2215  0012E8  3384               	rrcf	___ftadd@f2& (0+255),f,b
  2216  0012EA  2B8B               	incf	___ftadd@exp2& (0+255),f,b
  2217  0012EC                     l453:
  2218                           
  2219                           ; BSR set to: 0
  2220                           
  2221                           ; BSR set to: 0
  2222  0012EC  518B               	movf	___ftadd@exp2& (0+255),w,b
  2223  0012EE  198C               	xorwf	___ftadd@exp1& (0+255),w,b
  2224  0012F0  A4D8               	btfss	status,2,c
  2225  0012F2  D7F7               	goto	l454
  2226  0012F4                     u2030:
  2227                           
  2228                           ; BSR set to: 0
  2229                           
  2230                           ; BSR set to: 0
  2231                           
  2232                           ; BSR set to: 0
  2233  0012F4  AF8A               	btfss	___ftadd@sign& (0+255),7,b
  2234  0012F6  D00C               	goto	l456
  2235                           
  2236                           ; BSR set to: 0
  2237  0012F8  0EFF               	movlw	255
  2238  0012FA  1B81               	xorwf	___ftadd@f1& (0+255),f,b
  2239  0012FC  0EFF               	movlw	255
  2240  0012FE  1B82               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  2241  001300  0EFF               	movlw	255
  2242  001302  1B83               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  2243  001304  0E01               	movlw	1
  2244  001306  2781               	addwf	___ftadd@f1& (0+255),f,b
  2245  001308  0E00               	movlw	0
  2246  00130A  2382               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  2247  00130C  0E00               	movlw	0
  2248  00130E  2383               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  2249  001310                     l456:
  2250                           
  2251                           ; BSR set to: 0
  2252  001310  AD8A               	btfss	___ftadd@sign& (0+255),6,b
  2253  001312  D00C               	goto	l457
  2254                           
  2255                           ; BSR set to: 0
  2256  001314  0EFF               	movlw	255
  2257  001316  1B84               	xorwf	___ftadd@f2& (0+255),f,b
  2258  001318  0EFF               	movlw	255
  2259  00131A  1B85               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2260  00131C  0EFF               	movlw	255
  2261  00131E  1B86               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2262  001320  0E01               	movlw	1
  2263  001322  2784               	addwf	___ftadd@f2& (0+255),f,b
  2264  001324  0E00               	movlw	0
  2265  001326  2385               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2266  001328  0E00               	movlw	0
  2267  00132A  2386               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2268  00132C                     l457:
  2269                           
  2270                           ; BSR set to: 0
  2271                           
  2272                           ; BSR set to: 0
  2273  00132C  0E00               	movlw	0
  2274  00132E  6F8A               	movwf	___ftadd@sign& (0+255),b
  2275                           
  2276                           ; BSR set to: 0
  2277  001330  5181               	movf	___ftadd@f1& (0+255),w,b
  2278  001332  2784               	addwf	___ftadd@f2& (0+255),f,b
  2279  001334  5182               	movf	(___ftadd@f1+1)& (0+255),w,b
  2280  001336  2385               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2281  001338  5183               	movf	(___ftadd@f1+2)& (0+255),w,b
  2282  00133A  2386               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2283                           
  2284                           ; BSR set to: 0
  2285  00133C  AF86               	btfss	(___ftadd@f2+2)& (0+255),7,b
  2286  00133E  D00E               	goto	l458
  2287                           
  2288                           ; BSR set to: 0
  2289  001340  0EFF               	movlw	255
  2290  001342  1B84               	xorwf	___ftadd@f2& (0+255),f,b
  2291  001344  0EFF               	movlw	255
  2292  001346  1B85               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  2293  001348  0EFF               	movlw	255
  2294  00134A  1B86               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  2295  00134C  0E01               	movlw	1
  2296  00134E  2784               	addwf	___ftadd@f2& (0+255),f,b
  2297  001350  0E00               	movlw	0
  2298  001352  2385               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  2299  001354  0E00               	movlw	0
  2300  001356  2386               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  2301                           
  2302                           ; BSR set to: 0
  2303  001358  0E01               	movlw	1
  2304  00135A  6F8A               	movwf	___ftadd@sign& (0+255),b
  2305  00135C                     l458:
  2306                           
  2307                           ; BSR set to: 0
  2308                           
  2309                           ; BSR set to: 0
  2310  00135C  C084  F060         	movff	___ftadd@f2,___ftpack@arg
  2311  001360  C085  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  2312  001364  C086  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  2313  001368  C08C  F063         	movff	___ftadd@exp1,___ftpack@exp
  2314  00136C  C08A  F064         	movff	___ftadd@sign,___ftpack@sign
  2315  001370  EC37  F00C         	call	___ftpack	;wreg free
  2316  001374  C060  F081         	movff	?___ftpack,?___ftadd
  2317  001378  C061  F082         	movff	?___ftpack+1,?___ftadd+1
  2318  00137C  C062  F083         	movff	?___ftpack+2,?___ftadd+2
  2319  001380  0012               	return	
  2320  001382                     __end_of___ftadd:
  2321                           	opt stack 0
  2322                           tblptru	equ	0xFF8
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           postinc0	equ	0xFEE
  2327                           wreg	equ	0xFE8
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function ___altoft *****************
  2331 ;; Defined at:
  2332 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\altoft.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  c               4    8[BANK0 ] long 
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  sign            1   17[BANK0 ] unsigned char 
  2337 ;;  exp             1   16[BANK0 ] unsigned char 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  3    8[BANK0 ] float 
  2340 ;; Registers used:
  2341 ;;		wreg, status,2, status,0, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2347 ;;      Params:         0       4       0       0       0       0       0       0       0
  2348 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2349 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2350 ;;      Totals:         0      10       0       0       0       0       0       0       0
  2351 ;;Total ram usage:       10 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    5
  2354 ;; This function calls:
  2355 ;;		___ftpack
  2356 ;; This function is called by:
  2357 ;;		_USART_Init
  2358 ;; This function uses a non-reentrant model
  2359 ;;
  2360                           
  2361                           	psect	text10
  2362  001A2C                     __ptext10:
  2363                           	opt stack 0
  2364  001A2C                     ___altoft:
  2365                           	opt stack 24
  2366                           
  2367                           ;incstack = 0
  2368  001A2C  0E00               	movlw	0
  2369  001A2E  0100               	movlb	0	; () banked
  2370  001A30  6F71               	movwf	___altoft@sign& (0+255),b
  2371  001A32  0E8E               	movlw	142
  2372  001A34  6F70               	movwf	___altoft@exp& (0+255),b
  2373                           
  2374                           ; BSR set to: 0
  2375  001A36  AF6B               	btfss	(___altoft@c+3)& (0+255),7,b
  2376  001A38  D011               	goto	l269
  2377                           
  2378                           ; BSR set to: 0
  2379  001A3A  1F6B               	comf	(___altoft@c+3)& (0+255),f,b
  2380  001A3C  1F6A               	comf	(___altoft@c+2)& (0+255),f,b
  2381  001A3E  1F69               	comf	(___altoft@c+1)& (0+255),f,b
  2382  001A40  6D68               	negf	___altoft@c& (0+255),b
  2383  001A42  0E00               	movlw	0
  2384  001A44  2369               	addwfc	(___altoft@c+1)& (0+255),f,b
  2385  001A46  236A               	addwfc	(___altoft@c+2)& (0+255),f,b
  2386  001A48  236B               	addwfc	(___altoft@c+3)& (0+255),f,b
  2387                           
  2388                           ; BSR set to: 0
  2389  001A4A  0E01               	movlw	1
  2390  001A4C  6F71               	movwf	___altoft@sign& (0+255),b
  2391                           
  2392                           ; BSR set to: 0
  2393  001A4E  D006               	goto	l269
  2394  001A50                     
  2395                           ; BSR set to: 0
  2396                           
  2397                           ; BSR set to: 0
  2398  001A50  90D8               	bcf	status,0,c
  2399  001A52  336B               	rrcf	(___altoft@c+3)& (0+255),f,b
  2400  001A54  336A               	rrcf	(___altoft@c+2)& (0+255),f,b
  2401  001A56  3369               	rrcf	(___altoft@c+1)& (0+255),f,b
  2402  001A58  3368               	rrcf	___altoft@c& (0+255),f,b
  2403  001A5A  2B70               	incf	___altoft@exp& (0+255),f,b
  2404  001A5C                     l269:
  2405                           
  2406                           ; BSR set to: 0
  2407                           
  2408                           ; BSR set to: 0
  2409  001A5C  0E00               	movlw	0
  2410  001A5E  1568               	andwf	___altoft@c& (0+255),w,b
  2411  001A60  6F6C               	movwf	??___altoft& (0+255),b
  2412  001A62  0E00               	movlw	0
  2413  001A64  1569               	andwf	(___altoft@c+1)& (0+255),w,b
  2414  001A66  6F6D               	movwf	(??___altoft+1)& (0+255),b
  2415  001A68  0E00               	movlw	0
  2416  001A6A  156A               	andwf	(___altoft@c+2)& (0+255),w,b
  2417  001A6C  6F6E               	movwf	(??___altoft+2)& (0+255),b
  2418  001A6E  0EFF               	movlw	255
  2419  001A70  156B               	andwf	(___altoft@c+3)& (0+255),w,b
  2420  001A72  6F6F               	movwf	(??___altoft+3)& (0+255),b
  2421  001A74  516C               	movf	??___altoft& (0+255),w,b
  2422  001A76  116D               	iorwf	(??___altoft+1)& (0+255),w,b
  2423  001A78  116E               	iorwf	(??___altoft+2)& (0+255),w,b
  2424  001A7A  116F               	iorwf	(??___altoft+3)& (0+255),w,b
  2425  001A7C  A4D8               	btfss	status,2,c
  2426  001A7E  D7E8               	goto	l270
  2427                           
  2428                           ; BSR set to: 0
  2429                           
  2430                           ; BSR set to: 0
  2431  001A80  C068  F060         	movff	___altoft@c,___ftpack@arg
  2432  001A84  C069  F061         	movff	___altoft@c+1,___ftpack@arg+1
  2433  001A88  C06A  F062         	movff	___altoft@c+2,___ftpack@arg+2
  2434  001A8C  C070  F063         	movff	___altoft@exp,___ftpack@exp
  2435  001A90  C071  F064         	movff	___altoft@sign,___ftpack@sign
  2436  001A94  EC37  F00C         	call	___ftpack	;wreg free
  2437  001A98  C060  F068         	movff	?___ftpack,?___altoft
  2438  001A9C  C061  F069         	movff	?___ftpack+1,?___altoft+1
  2439  001AA0  C062  F06A         	movff	?___ftpack+2,?___altoft+2
  2440  001AA4  0012               	return	
  2441  001AA6                     __end_of___altoft:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           prodh	equ	0xFF4
  2445                           prodl	equ	0xFF3
  2446                           intcon	equ	0xFF2
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function ___ftpack *****************
  2452 ;; Defined at:
  2453 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  arg             3    0[BANK0 ] unsigned um
  2456 ;;  exp             1    3[BANK0 ] unsigned char 
  2457 ;;  sign            1    4[BANK0 ] unsigned char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;		None
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  3    0[BANK0 ] float 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, status,0
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2469 ;;      Params:         0       5       0       0       0       0       0       0       0
  2470 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2471 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2472 ;;      Totals:         0       8       0       0       0       0       0       0       0
  2473 ;;Total ram usage:        8 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    4
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		___altoft
  2480 ;;		___ftadd
  2481 ;;		___ftdiv
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text11
  2486  00186E                     __ptext11:
  2487                           	opt stack 0
  2488  00186E                     ___ftpack:
  2489                           	opt stack 24
  2490                           
  2491                           ;incstack = 0
  2492  00186E  0100               	movlb	0	; () banked
  2493  001870  5163               	movf	___ftpack@exp& (0+255),w,b
  2494  001872  B4D8               	btfsc	status,2,c
  2495  001874  D005               	goto	u1740
  2496                           
  2497                           ; BSR set to: 0
  2498  001876  5160               	movf	___ftpack@arg& (0+255),w,b
  2499  001878  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  2500  00187A  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  2501  00187C  A4D8               	btfss	status,2,c
  2502  00187E  D00C               	goto	l399
  2503  001880                     u1740:
  2504                           
  2505                           ; BSR set to: 0
  2506                           
  2507                           ; BSR set to: 0
  2508  001880  0E00               	movlw	0
  2509  001882  6F60               	movwf	?___ftpack& (0+255),b
  2510  001884  0E00               	movlw	0
  2511  001886  6F61               	movwf	(?___ftpack+1)& (0+255),b
  2512  001888  0E00               	movlw	0
  2513  00188A  6F62               	movwf	(?___ftpack+2)& (0+255),b
  2514                           
  2515                           ; BSR set to: 0
  2516  00188C  0012               	return	
  2517  00188E                     
  2518                           ; BSR set to: 0
  2519                           
  2520                           ; BSR set to: 0
  2521  00188E  2B63               	incf	___ftpack@exp& (0+255),f,b
  2522  001890  90D8               	bcf	status,0,c
  2523  001892  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  2524  001894  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  2525  001896  3360               	rrcf	___ftpack@arg& (0+255),f,b
  2526  001898                     l399:
  2527                           
  2528                           ; BSR set to: 0
  2529                           
  2530                           ; BSR set to: 0
  2531  001898  0E00               	movlw	0
  2532  00189A  1560               	andwf	___ftpack@arg& (0+255),w,b
  2533  00189C  6F65               	movwf	??___ftpack& (0+255),b
  2534  00189E  0E00               	movlw	0
  2535  0018A0  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  2536  0018A2  6F66               	movwf	(??___ftpack+1)& (0+255),b
  2537  0018A4  0EFE               	movlw	254
  2538  0018A6  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  2539  0018A8  6F67               	movwf	(??___ftpack+2)& (0+255),b
  2540  0018AA  5165               	movf	??___ftpack& (0+255),w,b
  2541  0018AC  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  2542  0018AE  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  2543  0018B0  B4D8               	btfsc	status,2,c
  2544  0018B2  D00C               	goto	l402
  2545  0018B4  D7EC               	goto	l400
  2546  0018B6                     
  2547                           ; BSR set to: 0
  2548                           
  2549                           ; BSR set to: 0
  2550  0018B6  2B63               	incf	___ftpack@exp& (0+255),f,b
  2551                           
  2552                           ; BSR set to: 0
  2553  0018B8  0E01               	movlw	1
  2554  0018BA  2760               	addwf	___ftpack@arg& (0+255),f,b
  2555  0018BC  0E00               	movlw	0
  2556  0018BE  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  2557  0018C0  0E00               	movlw	0
  2558  0018C2  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  2559  0018C4  90D8               	bcf	status,0,c
  2560  0018C6  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  2561  0018C8  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  2562  0018CA  3360               	rrcf	___ftpack@arg& (0+255),f,b
  2563  0018CC                     l402:
  2564                           
  2565                           ; BSR set to: 0
  2566                           
  2567                           ; BSR set to: 0
  2568  0018CC  0E00               	movlw	0
  2569  0018CE  1560               	andwf	___ftpack@arg& (0+255),w,b
  2570  0018D0  6F65               	movwf	??___ftpack& (0+255),b
  2571  0018D2  0E00               	movlw	0
  2572  0018D4  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  2573  0018D6  6F66               	movwf	(??___ftpack+1)& (0+255),b
  2574  0018D8  0EFF               	movlw	255
  2575  0018DA  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  2576  0018DC  6F67               	movwf	(??___ftpack+2)& (0+255),b
  2577  0018DE  5165               	movf	??___ftpack& (0+255),w,b
  2578  0018E0  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  2579  0018E2  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  2580  0018E4  B4D8               	btfsc	status,2,c
  2581  0018E6  D006               	goto	l405
  2582  0018E8  D7E6               	goto	l403
  2583  0018EA                     
  2584                           ; BSR set to: 0
  2585                           
  2586                           ; BSR set to: 0
  2587  0018EA  0763               	decf	___ftpack@exp& (0+255),f,b
  2588  0018EC  90D8               	bcf	status,0,c
  2589  0018EE  3760               	rlcf	___ftpack@arg& (0+255),f,b
  2590  0018F0  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  2591  0018F2  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  2592  0018F4                     l405:
  2593                           
  2594                           ; BSR set to: 0
  2595                           
  2596                           ; BSR set to: 0
  2597  0018F4  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  2598  0018F6  D003               	goto	u1780
  2599                           
  2600                           ; BSR set to: 0
  2601  0018F8  0E02               	movlw	2
  2602  0018FA  6163               	cpfslt	___ftpack@exp& (0+255),b
  2603  0018FC  D7F6               	goto	l406
  2604  0018FE                     u1780:
  2605                           
  2606                           ; BSR set to: 0
  2607                           
  2608                           ; BSR set to: 0
  2609  0018FE  A163               	btfss	___ftpack@exp& (0+255),0,b
  2610                           
  2611                           ; BSR set to: 0
  2612  001900  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  2613                           
  2614                           ; BSR set to: 0
  2615                           
  2616                           ; BSR set to: 0
  2617  001902  90D8               	bcf	status,0,c
  2618  001904  3363               	rrcf	___ftpack@exp& (0+255),f,b
  2619  001906  5163               	movf	___ftpack@exp& (0+255),w,b
  2620  001908  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  2621                           
  2622                           ; BSR set to: 0
  2623  00190A  5164               	movf	___ftpack@sign& (0+255),w,b
  2624  00190C  A4D8               	btfss	status,2,c
  2625                           
  2626                           ; BSR set to: 0
  2627  00190E  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  2628                           
  2629                           ; BSR set to: 0
  2630                           
  2631                           ; BSR set to: 0
  2632  001910  C060  F060         	movff	___ftpack@arg,?___ftpack
  2633  001914  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  2634  001918  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  2635  00191C  0012               	return	
  2636  00191E                     __end_of___ftpack:
  2637                           	opt stack 0
  2638                           tblptru	equ	0xFF8
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           intcon	equ	0xFF2
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           status	equ	0xFD8
  2645                           
  2646 ;; *************** function _ISR *****************
  2647 ;; Defined at:
  2648 ;;		line 140 in file "PIC_ESP8266_WiFi.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;		None
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  oldstatus       1   44[COMRAM] unsigned char 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0
  2663 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2664 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2665 ;;      Totals:        19       0       0       0       0       0       0       0       0
  2666 ;;Total ram usage:       19 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    3
  2669 ;; This function calls:
  2670 ;;		_USART_RxChar
  2671 ;;		_txSensorsData
  2672 ;;		i2_MSdelay
  2673 ;; This function is called by:
  2674 ;;		Interrupt level 2
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	intcode
  2679  001008                     __pintcode:
  2680                           	opt stack 0
  2681  001008                     _ISR:
  2682                           	opt stack 24
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;incstack = 0
  2686  001008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2687  00100A  EDD8  F00B         	call	int_func,f	;refresh shadow registers
  2688                           tblptru	equ	0xFF8
  2689                           prodh	equ	0xFF4
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           status	equ	0xFD8
  2695                           
  2696                           	psect	intcode_body
  2697  0017B0                     __pintcode_body:
  2698                           	opt stack 24
  2699  0017B0                     int_func:
  2700                           	opt stack 24
  2701  0017B0  0006               	pop		; remove dummy address from shadow register refresh
  2702  0017B2  CFFA F01B          	movff	pclath,??_ISR
  2703  0017B6  CFFB F01C          	movff	pclatu,??_ISR+1
  2704  0017BA  CFE9 F01D          	movff	fsr0l,??_ISR+2
  2705  0017BE  CFEA F01E          	movff	fsr0h,??_ISR+3
  2706  0017C2  CFE1 F01F          	movff	fsr1l,??_ISR+4
  2707  0017C6  CFE2 F020          	movff	fsr1h,??_ISR+5
  2708  0017CA  CFD9 F021          	movff	fsr2l,??_ISR+6
  2709  0017CE  CFDA F022          	movff	fsr2h,??_ISR+7
  2710  0017D2  CFF3 F023          	movff	prodl,??_ISR+8
  2711  0017D6  CFF4 F024          	movff	prodh,??_ISR+9
  2712  0017DA  CFF6 F025          	movff	tblptrl,??_ISR+10
  2713  0017DE  CFF7 F026          	movff	tblptrh,??_ISR+11
  2714  0017E2  CFF8 F027          	movff	tblptru,??_ISR+12
  2715  0017E6  CFF5 F028          	movff	tablat,??_ISR+13
  2716  0017EA  C051  F029         	movff	btemp,??_ISR+14
  2717  0017EE  C052  F02A         	movff	btemp+1,??_ISR+15
  2718  0017F2  C053  F02B         	movff	btemp+2,??_ISR+16
  2719  0017F6  C054  F02C         	movff	btemp+3,??_ISR+17
  2720                           
  2721                           ;PIC_ESP8266_WiFi.c: 142: uint8_t oldstatus = STATUS;
  2722  0017FA  CFD8 F02D          	movff	status,ISR@oldstatus	;volatile
  2723                           
  2724                           ;PIC_ESP8266_WiFi.c: 143: INTCONbits.GIE = 0;
  2725  0017FE  9EF2               	bcf	intcon,7,c	;volatile
  2726                           
  2727                           ;PIC_ESP8266_WiFi.c: 144: if(RCIF==1){
  2728  001800  AA9E               	btfss	3998,5,c	;volatile
  2729  001802  D00C               	goto	i2l146
  2730                           
  2731                           ;PIC_ESP8266_WiFi.c: 145: if (USART_RxChar()=='.')txSensorsData();
  2732  001804  EC9E  F00E         	call	_USART_RxChar	;wreg free
  2733  001808  0A2E               	xorlw	46
  2734  00180A  B4D8               	btfsc	status,2,c
  2735  00180C  EC65  F00A         	call	_txSensorsData	;wreg free
  2736                           
  2737                           ;PIC_ESP8266_WiFi.c: 146: MSdelay(100);
  2738  001810  0E00               	movlw	0
  2739  001812  6E02               	movwf	i2MSdelay@val+1,c
  2740  001814  0E64               	movlw	100
  2741  001816  6E01               	movwf	i2MSdelay@val,c
  2742  001818  EC56  F00E         	call	i2_MSdelay	;wreg free
  2743  00181C                     i2l146:
  2744                           
  2745                           ;PIC_ESP8266_WiFi.c: 147: }
  2746                           ;PIC_ESP8266_WiFi.c: 148: INTCONbits.GIE = 1;
  2747  00181C  8EF2               	bsf	intcon,7,c	;volatile
  2748                           
  2749                           ;PIC_ESP8266_WiFi.c: 149: STATUS = oldstatus;
  2750  00181E  C02D  FFD8         	movff	ISR@oldstatus,status	;volatile
  2751  001822  C02C  F054         	movff	??_ISR+17,btemp+3
  2752  001826  C02B  F053         	movff	??_ISR+16,btemp+2
  2753  00182A  C02A  F052         	movff	??_ISR+15,btemp+1
  2754  00182E  C029  F051         	movff	??_ISR+14,btemp
  2755  001832  C028  FFF5         	movff	??_ISR+13,tablat
  2756  001836  C027  FFF8         	movff	??_ISR+12,tblptru
  2757  00183A  C026  FFF7         	movff	??_ISR+11,tblptrh
  2758  00183E  C025  FFF6         	movff	??_ISR+10,tblptrl
  2759  001842  C024  FFF4         	movff	??_ISR+9,prodh
  2760  001846  C023  FFF3         	movff	??_ISR+8,prodl
  2761  00184A  C022  FFDA         	movff	??_ISR+7,fsr2h
  2762  00184E  C021  FFD9         	movff	??_ISR+6,fsr2l
  2763  001852  C020  FFE2         	movff	??_ISR+5,fsr1h
  2764  001856  C01F  FFE1         	movff	??_ISR+4,fsr1l
  2765  00185A  C01E  FFEA         	movff	??_ISR+3,fsr0h
  2766  00185E  C01D  FFE9         	movff	??_ISR+2,fsr0l
  2767  001862  C01C  FFFB         	movff	??_ISR+1,pclatu
  2768  001866  C01B  FFFA         	movff	??_ISR,pclath
  2769  00186A  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2770  00186C  0011               	retfie		f
  2771  00186E                     __end_of_ISR:
  2772                           	opt stack 0
  2773                           pclatu	equ	0xFFB
  2774                           pclath	equ	0xFFA
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           intcon	equ	0xFF2
  2782                           postinc0	equ	0xFEE
  2783                           fsr0h	equ	0xFEA
  2784                           fsr0l	equ	0xFE9
  2785                           wreg	equ	0xFE8
  2786                           fsr1h	equ	0xFE2
  2787                           fsr1l	equ	0xFE1
  2788                           fsr2h	equ	0xFDA
  2789                           fsr2l	equ	0xFD9
  2790                           status	equ	0xFD8
  2791                           
  2792 ;; *************** function i2_MSdelay *****************
  2793 ;; Defined at:
  2794 ;;		line 46 in file "USART_Source_File.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  val             2    0[COMRAM] unsigned int 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  MSdelay         2    4[COMRAM] unsigned int 
  2799 ;;  MSdelay         2    2[COMRAM] unsigned int 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2809 ;;      Params:         2       0       0       0       0       0       0       0       0
  2810 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2812 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2813 ;;Total ram usage:        6 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_ISR
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text13
  2823  001CAC                     __ptext13:
  2824                           	opt stack 0
  2825  001CAC                     i2_MSdelay:
  2826                           	opt stack 26
  2827                           
  2828                           ;USART_Source_File.c: 48: unsigned int i,j;
  2829                           ;USART_Source_File.c: 49: for(i = 0; i <= val; i++)
  2830                           
  2831                           ;incstack = 0
  2832  001CAC  0E00               	movlw	0
  2833  001CAE  6E04               	movwf	i2MSdelay@i+1,c
  2834  001CB0  0E00               	movlw	0
  2835  001CB2  6E03               	movwf	i2MSdelay@i,c
  2836  001CB4  D00F               	goto	i2l44
  2837  001CB6                     
  2838                           ;USART_Source_File.c: 50: for(j = 0; j < 165; j++);
  2839  001CB6  0E00               	movlw	0
  2840  001CB8  6E06               	movwf	i2MSdelay@j+1,c
  2841  001CBA  0E00               	movlw	0
  2842  001CBC  6E05               	movwf	i2MSdelay@j,c
  2843  001CBE                     i2l1808:
  2844  001CBE  5006               	movf	i2MSdelay@j+1,w,c
  2845  001CC0  E107               	bnz	i2l1816
  2846  001CC2  0EA5               	movlw	165
  2847  001CC4  5C05               	subwf	i2MSdelay@j,w,c
  2848  001CC6  B0D8               	btfsc	status,0,c
  2849  001CC8  D003               	goto	i2u169_40
  2850  001CCA  4A05               	infsnz	i2MSdelay@j,f,c
  2851  001CCC  2A06               	incf	i2MSdelay@j+1,f,c
  2852  001CCE  D7F7               	goto	i2l1808
  2853  001CD0                     i2u169_40:
  2854  001CD0                     i2l1816:
  2855  001CD0  4A03               	infsnz	i2MSdelay@i,f,c
  2856  001CD2  2A04               	incf	i2MSdelay@i+1,f,c
  2857  001CD4                     i2l44:
  2858  001CD4  5003               	movf	i2MSdelay@i,w,c
  2859  001CD6  5C01               	subwf	i2MSdelay@val,w,c
  2860  001CD8  5004               	movf	i2MSdelay@i+1,w,c
  2861  001CDA  5802               	subwfb	i2MSdelay@val+1,w,c
  2862  001CDC  A0D8               	btfss	status,0,c
  2863  001CDE  0012               	return	
  2864  001CE0  D7EA               	goto	i2l45
  2865  001CE2                     __end_ofi2_MSdelay:
  2866                           	opt stack 0
  2867                           pclatu	equ	0xFFB
  2868                           pclath	equ	0xFFA
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           intcon	equ	0xFF2
  2876                           postinc0	equ	0xFEE
  2877                           fsr0h	equ	0xFEA
  2878                           fsr0l	equ	0xFE9
  2879                           wreg	equ	0xFE8
  2880                           fsr1h	equ	0xFE2
  2881                           fsr1l	equ	0xFE1
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _txSensorsData *****************
  2887 ;; Defined at:
  2888 ;;		line 99 in file "PIC_ESP8266_WiFi.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;		None
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0
  2903 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2905 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2906 ;;Total ram usage:        0 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    2
  2909 ;; This function calls:
  2910 ;;		_USART_SendString
  2911 ;;		_sprintf
  2912 ;; This function is called by:
  2913 ;;		_ISR
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text14
  2918  0014CA                     __ptext14:
  2919                           	opt stack 0
  2920  0014CA                     _txSensorsData:
  2921                           	opt stack 24
  2922                           
  2923                           ;PIC_ESP8266_WiFi.c: 113: sprintf(mystring,"%d",temp);
  2924                           
  2925                           ;incstack = 0
  2926  0014CA  0E41               	movlw	low _mystring
  2927  0014CC  6E0D               	movwf	sprintf@sp,c
  2928  0014CE  0E00               	movlw	high _mystring
  2929  0014D0  6E0E               	movwf	sprintf@sp+1,c
  2930  0014D2  0E1D               	movlw	low STR_1
  2931  0014D4  6E0F               	movwf	sprintf@f,c
  2932  0014D6  0E10               	movlw	high STR_1
  2933  0014D8  6E10               	movwf	sprintf@f+1,c
  2934  0014DA  C03A  F011         	movff	_temp,?_sprintf+4
  2935  0014DE  C03B  F012         	movff	_temp+1,?_sprintf+5
  2936  0014E2  ECC1  F009         	call	_sprintf	;wreg free
  2937                           
  2938                           ;PIC_ESP8266_WiFi.c: 115: USART_SendString(mystring);
  2939  0014E6  0E41               	movlw	low _mystring
  2940  0014E8  6E02               	movwf	USART_SendString@str,c
  2941  0014EA  0E00               	movlw	high _mystring
  2942  0014EC  6E03               	movwf	USART_SendString@str+1,c
  2943  0014EE  ECF0  F00D         	call	_USART_SendString	;wreg free
  2944                           
  2945                           ;PIC_ESP8266_WiFi.c: 117: sprintf(mystring,"%d",soil);
  2946  0014F2  0E41               	movlw	low _mystring
  2947  0014F4  6E0D               	movwf	sprintf@sp,c
  2948  0014F6  0E00               	movlw	high _mystring
  2949  0014F8  6E0E               	movwf	sprintf@sp+1,c
  2950  0014FA  0E1D               	movlw	low STR_1
  2951  0014FC  6E0F               	movwf	sprintf@f,c
  2952  0014FE  0E10               	movlw	high STR_1
  2953  001500  6E10               	movwf	sprintf@f+1,c
  2954  001502  C038  F011         	movff	_soil,?_sprintf+4
  2955  001506  C039  F012         	movff	_soil+1,?_sprintf+5
  2956  00150A  ECC1  F009         	call	_sprintf	;wreg free
  2957                           
  2958                           ;PIC_ESP8266_WiFi.c: 119: USART_SendString(",");
  2959  00150E  0E22               	movlw	low STR_3
  2960  001510  6E02               	movwf	USART_SendString@str,c
  2961  001512  0E10               	movlw	high STR_3
  2962  001514  6E03               	movwf	USART_SendString@str+1,c
  2963  001516  ECF0  F00D         	call	_USART_SendString	;wreg free
  2964                           
  2965                           ;PIC_ESP8266_WiFi.c: 120: USART_SendString(mystring);
  2966  00151A  0E41               	movlw	low _mystring
  2967  00151C  6E02               	movwf	USART_SendString@str,c
  2968  00151E  0E00               	movlw	high _mystring
  2969  001520  6E03               	movwf	USART_SendString@str+1,c
  2970  001522  ECF0  F00D         	call	_USART_SendString	;wreg free
  2971                           
  2972                           ;PIC_ESP8266_WiFi.c: 122: sprintf(mystring,"%d",force);
  2973  001526  0E41               	movlw	low _mystring
  2974  001528  6E0D               	movwf	sprintf@sp,c
  2975  00152A  0E00               	movlw	high _mystring
  2976  00152C  6E0E               	movwf	sprintf@sp+1,c
  2977  00152E  0E1D               	movlw	low STR_1
  2978  001530  6E0F               	movwf	sprintf@f,c
  2979  001532  0E10               	movlw	high STR_1
  2980  001534  6E10               	movwf	sprintf@f+1,c
  2981  001536  C036  F011         	movff	_force,?_sprintf+4
  2982  00153A  C037  F012         	movff	_force+1,?_sprintf+5
  2983  00153E  ECC1  F009         	call	_sprintf	;wreg free
  2984                           
  2985                           ;PIC_ESP8266_WiFi.c: 124: USART_SendString(",");
  2986  001542  0E22               	movlw	low STR_3
  2987  001544  6E02               	movwf	USART_SendString@str,c
  2988  001546  0E10               	movlw	high STR_3
  2989  001548  6E03               	movwf	USART_SendString@str+1,c
  2990  00154A  ECF0  F00D         	call	_USART_SendString	;wreg free
  2991                           
  2992                           ;PIC_ESP8266_WiFi.c: 125: USART_SendString(mystring);
  2993  00154E  0E41               	movlw	low _mystring
  2994  001550  6E02               	movwf	USART_SendString@str,c
  2995  001552  0E00               	movlw	high _mystring
  2996  001554  6E03               	movwf	USART_SendString@str+1,c
  2997  001556  ECF0  F00D         	call	_USART_SendString	;wreg free
  2998                           
  2999                           ;PIC_ESP8266_WiFi.c: 127: sprintf(mystring,"%d",rain);
  3000  00155A  0E41               	movlw	low _mystring
  3001  00155C  6E0D               	movwf	sprintf@sp,c
  3002  00155E  0E00               	movlw	high _mystring
  3003  001560  6E0E               	movwf	sprintf@sp+1,c
  3004  001562  0E1D               	movlw	low STR_1
  3005  001564  6E0F               	movwf	sprintf@f,c
  3006  001566  0E10               	movlw	high STR_1
  3007  001568  6E10               	movwf	sprintf@f+1,c
  3008  00156A  C034  F011         	movff	_rain,?_sprintf+4
  3009  00156E  C035  F012         	movff	_rain+1,?_sprintf+5
  3010  001572  ECC1  F009         	call	_sprintf	;wreg free
  3011                           
  3012                           ;PIC_ESP8266_WiFi.c: 129: USART_SendString(",");
  3013  001576  0E22               	movlw	low STR_3
  3014  001578  6E02               	movwf	USART_SendString@str,c
  3015  00157A  0E10               	movlw	high STR_3
  3016  00157C  6E03               	movwf	USART_SendString@str+1,c
  3017  00157E  ECF0  F00D         	call	_USART_SendString	;wreg free
  3018                           
  3019                           ;PIC_ESP8266_WiFi.c: 130: USART_SendString(mystring);
  3020  001582  0E41               	movlw	low _mystring
  3021  001584  6E02               	movwf	USART_SendString@str,c
  3022  001586  0E00               	movlw	high _mystring
  3023  001588  6E03               	movwf	USART_SendString@str+1,c
  3024  00158A  ECF0  F00D         	call	_USART_SendString	;wreg free
  3025                           
  3026                           ;PIC_ESP8266_WiFi.c: 132: sprintf(mystring,"%d",light);
  3027  00158E  0E41               	movlw	low _mystring
  3028  001590  6E0D               	movwf	sprintf@sp,c
  3029  001592  0E00               	movlw	high _mystring
  3030  001594  6E0E               	movwf	sprintf@sp+1,c
  3031  001596  0E1D               	movlw	low STR_1
  3032  001598  6E0F               	movwf	sprintf@f,c
  3033  00159A  0E10               	movlw	high STR_1
  3034  00159C  6E10               	movwf	sprintf@f+1,c
  3035  00159E  C032  F011         	movff	_light,?_sprintf+4
  3036  0015A2  C033  F012         	movff	_light+1,?_sprintf+5
  3037  0015A6  ECC1  F009         	call	_sprintf	;wreg free
  3038                           
  3039                           ;PIC_ESP8266_WiFi.c: 134: USART_SendString(",");
  3040  0015AA  0E22               	movlw	low STR_3
  3041  0015AC  6E02               	movwf	USART_SendString@str,c
  3042  0015AE  0E10               	movlw	high STR_3
  3043  0015B0  6E03               	movwf	USART_SendString@str+1,c
  3044  0015B2  ECF0  F00D         	call	_USART_SendString	;wreg free
  3045                           
  3046                           ;PIC_ESP8266_WiFi.c: 135: USART_SendString(mystring);
  3047  0015B6  0E41               	movlw	low _mystring
  3048  0015B8  6E02               	movwf	USART_SendString@str,c
  3049  0015BA  0E00               	movlw	high _mystring
  3050  0015BC  6E03               	movwf	USART_SendString@str+1,c
  3051  0015BE  ECF0  F00D         	call	_USART_SendString	;wreg free
  3052                           
  3053                           ;PIC_ESP8266_WiFi.c: 137: USART_SendString("\n");
  3054  0015C2  0E20               	movlw	low STR_10
  3055  0015C4  6E02               	movwf	USART_SendString@str,c
  3056  0015C6  0E10               	movlw	high STR_10
  3057  0015C8  6E03               	movwf	USART_SendString@str+1,c
  3058  0015CA  ECF0  F00D         	call	_USART_SendString	;wreg free
  3059  0015CE  0012               	return		;funcret
  3060  0015D0                     __end_of_txSensorsData:
  3061                           	opt stack 0
  3062                           pclatu	equ	0xFFB
  3063                           pclath	equ	0xFFA
  3064                           tblptru	equ	0xFF8
  3065                           tblptrh	equ	0xFF7
  3066                           tblptrl	equ	0xFF6
  3067                           tablat	equ	0xFF5
  3068                           prodh	equ	0xFF4
  3069                           prodl	equ	0xFF3
  3070                           intcon	equ	0xFF2
  3071                           postinc0	equ	0xFEE
  3072                           fsr0h	equ	0xFEA
  3073                           fsr0l	equ	0xFE9
  3074                           wreg	equ	0xFE8
  3075                           fsr1h	equ	0xFE2
  3076                           fsr1l	equ	0xFE1
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _sprintf *****************
  3082 ;; Defined at:
  3083 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3086 ;;		 -> mystring(16), 
  3087 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3088 ;;		 -> STR_8(3), STR_6(3), STR_4(3), STR_2(3), 
  3089 ;;		 -> STR_1(3), 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  tmpval          4    0        struct .
  3092 ;;  cp              3    0        PTR const unsigned char 
  3093 ;;  val             2   23[COMRAM] unsigned int 
  3094 ;;  ap              2   19[COMRAM] PTR void [1]
  3095 ;;		 -> ?_sprintf(2), 
  3096 ;;  len             2    0        unsigned int 
  3097 ;;  c               1   25[COMRAM] char 
  3098 ;;  prec            1   22[COMRAM] char 
  3099 ;;  flag            1   21[COMRAM] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  2   12[COMRAM] int 
  3102 ;; Registers used:
  3103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3109 ;;      Params:         6       0       0       0       0       0       0       0       0
  3110 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3111 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3112 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3113 ;;Total ram usage:       14 bytes
  3114 ;; Hardware stack levels used:    1
  3115 ;; Hardware stack levels required when called:    1
  3116 ;; This function calls:
  3117 ;;		___lwdiv
  3118 ;;		___lwmod
  3119 ;; This function is called by:
  3120 ;;		_txSensorsData
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text15
  3125  001382                     __ptext15:
  3126                           	opt stack 0
  3127  001382                     _sprintf:
  3128                           	opt stack 24
  3129                           
  3130                           ;doprnt.c: 494: va_list ap;
  3131                           ;doprnt.c: 499: signed char c;
  3132                           ;doprnt.c: 506: signed char prec;
  3133                           ;doprnt.c: 508: unsigned char flag;
  3134                           ;doprnt.c: 523: union {
  3135                           ;doprnt.c: 524: unsigned long vd;
  3136                           ;doprnt.c: 525: double integ;
  3137                           ;doprnt.c: 526: } tmpval;
  3138                           ;doprnt.c: 528: unsigned int val;
  3139                           ;doprnt.c: 529: unsigned len;
  3140                           ;doprnt.c: 530: const char * cp;
  3141                           ;doprnt.c: 533: *ap = __va_start();
  3142                           
  3143                           ;incstack = 0
  3144  001382  0E11               	movlw	low (?_sprintf+4)
  3145  001384  6E14               	movwf	sprintf@ap,c
  3146  001386  0E00               	movlw	high (?_sprintf+4)
  3147  001388  6E15               	movwf	sprintf@ap+1,c
  3148                           
  3149                           ;doprnt.c: 536: while(c = *f++) {
  3150  00138A  D08C               	goto	i2u114_40
  3151  00138C                     
  3152                           ;doprnt.c: 538: if(c != '%')
  3153  00138C  0E25               	movlw	37
  3154  00138E  181A               	xorwf	sprintf@c,w,c
  3155  001390  B4D8               	btfsc	status,2,c
  3156  001392  D009               	goto	i2l167
  3157                           
  3158                           ;doprnt.c: 540: {
  3159                           ;doprnt.c: 541: ((*sp++ = (c)));
  3160  001394  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3161  001398  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3162  00139C  C01A  FFDF         	movff	sprintf@c,indf2
  3163  0013A0  4A0D               	infsnz	sprintf@sp,f,c
  3164  0013A2  2A0E               	incf	sprintf@sp+1,f,c
  3165                           
  3166                           ;doprnt.c: 542: continue;
  3167  0013A4  D07F               	goto	i2u114_40
  3168  0013A6                     i2l167:
  3169                           
  3170                           ;doprnt.c: 543: }
  3171                           ;doprnt.c: 548: flag = 0;
  3172  0013A6  0E00               	movlw	0
  3173  0013A8  6E16               	movwf	sprintf@flag,c
  3174                           
  3175                           ;doprnt.c: 822: }
  3176                           
  3177                           ;doprnt.c: 813: continue;
  3178                           
  3179                           ;doprnt.c: 802: default:
  3180                           
  3181                           ;doprnt.c: 698: case 'i':
  3182                           ;doprnt.c: 699: break;
  3183                           
  3184                           ;doprnt.c: 697: case 'd':
  3185                           
  3186                           ;doprnt.c: 638: goto alldone;
  3187                           
  3188                           ;doprnt.c: 637: case 0:
  3189                           
  3190                           ;doprnt.c: 635: switch(c = *f++) {
  3191  0013AA  C00F  FFF6         	movff	sprintf@f,tblptrl
  3192  0013AE  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3193  0013B2  4A0F               	infsnz	sprintf@f,f,c
  3194  0013B4  2A10               	incf	sprintf@f+1,f,c
  3195  0013B6                     	if	0	;tblptru may be non-zero
  3196  0013B6                     	endif
  3197  0013B6                     	if	0	;tblptru may be non-zero
  3198  0013B6                     	endif
  3199  0013B6  0008               	tblrd		*
  3200  0013B8  CFF5 F01A          	movff	tablat,sprintf@c
  3201  0013BC  501A               	movf	sprintf@c,w,c
  3202                           
  3203                           ; Switch size 1, requested type "space"
  3204                           ; Number of cases is 3, Range of values is 0 to 105
  3205                           ; switch strategies available:
  3206                           ; Name         Instructions Cycles
  3207                           ; simple_byte           10     6 (average)
  3208                           ;	Chosen strategy is simple_byte
  3209  0013BE  0A00               	xorlw	0	; case 0
  3210  0013C0  B4D8               	btfsc	status,2,c
  3211  0013C2  D07C               	goto	i2u115_40
  3212  0013C4  0A64               	xorlw	100	; case 100
  3213  0013C6  B4D8               	btfsc	status,2,c
  3214  0013C8  D003               	goto	i2l173
  3215  0013CA  0A0D               	xorlw	13	; case 105
  3216  0013CC  A4D8               	btfss	status,2,c
  3217  0013CE  D06A               	goto	i2u114_40
  3218  0013D0                     i2l173:
  3219                           
  3220                           ;doprnt.c: 1253: {
  3221                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3222  0013D0  C014  FFD9         	movff	sprintf@ap,fsr2l
  3223  0013D4  C015  FFDA         	movff	sprintf@ap+1,fsr2h
  3224  0013D8  CFDE F018          	movff	postinc2,sprintf@val
  3225  0013DC  CFDD F019          	movff	postdec2,sprintf@val+1
  3226  0013E0  0E02               	movlw	2
  3227  0013E2  2614               	addwf	sprintf@ap,f,c
  3228  0013E4  0E00               	movlw	0
  3229  0013E6  2215               	addwfc	sprintf@ap+1,f,c
  3230                           
  3231                           ;doprnt.c: 1261: if((int)val < 0) {
  3232  0013E8  AE19               	btfss	sprintf@val+1,7,c
  3233  0013EA  D006               	goto	i2l175
  3234                           
  3235                           ;doprnt.c: 1262: flag |= 0x03;
  3236  0013EC  0E03               	movlw	3
  3237  0013EE  1216               	iorwf	sprintf@flag,f,c
  3238                           
  3239                           ;doprnt.c: 1263: val = -val;
  3240  0013F0  6C18               	negf	sprintf@val,c
  3241  0013F2  1E19               	comf	sprintf@val+1,f,c
  3242  0013F4  B0D8               	btfsc	status,0,c
  3243  0013F6  2A19               	incf	sprintf@val+1,f,c
  3244  0013F8                     i2l175:
  3245                           
  3246                           ;doprnt.c: 1264: }
  3247                           ;doprnt.c: 1266: }
  3248                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3249  0013F8  0E01               	movlw	1
  3250  0013FA  6E1A               	movwf	sprintf@c,c
  3251  0013FC                     i2l1458:
  3252  0013FC  0E05               	movlw	5
  3253  0013FE  181A               	xorwf	sprintf@c,w,c
  3254  001400  B4D8               	btfsc	status,2,c
  3255  001402  D012               	goto	i2u112_40
  3256                           
  3257                           ;doprnt.c: 1306: if(val < dpowers[c])
  3258  001404  501A               	movf	sprintf@c,w,c
  3259  001406  0D02               	mullw	2
  3260  001408  0E13               	movlw	low _dpowers
  3261  00140A  24F3               	addwf	prodl,w,c
  3262  00140C  6EF6               	movwf	tblptrl,c
  3263  00140E  0E10               	movlw	high _dpowers
  3264  001410  20F4               	addwfc	prodh,w,c
  3265  001412  6EF7               	movwf	tblptrh,c
  3266  001414                     	if	0	;There are less than 3 active tblptr bytes
  3267  001414                     	endif
  3268  001414  0009               	tblrd		*+
  3269  001416  50F5               	movf	tablat,w,c
  3270  001418  5C18               	subwf	sprintf@val,w,c
  3271  00141A  0009               	tblrd		*+
  3272  00141C  50F5               	movf	tablat,w,c
  3273  00141E  5819               	subwfb	sprintf@val+1,w,c
  3274  001420  A0D8               	btfss	status,0,c
  3275  001422  D002               	goto	i2u112_40
  3276                           
  3277                           ;doprnt.c: 1307: break;
  3278  001424  2A1A               	incf	sprintf@c,f,c
  3279  001426  D7EA               	goto	i2l1458
  3280  001428                     i2u112_40:
  3281                           
  3282                           ;doprnt.c: 1422: {
  3283                           ;doprnt.c: 1438: if(flag & 0x03)
  3284  001428  C016  F013         	movff	sprintf@flag,??_sprintf
  3285  00142C  0E03               	movlw	3
  3286  00142E  1613               	andwf	??_sprintf,f,c
  3287  001430  B4D8               	btfsc	status,2,c
  3288  001432  D008               	goto	i2l179
  3289                           
  3290                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3291  001434  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3292  001438  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3293  00143C  0E2D               	movlw	45
  3294  00143E  6EDF               	movwf	indf2,c
  3295  001440  4A0D               	infsnz	sprintf@sp,f,c
  3296  001442  2A0E               	incf	sprintf@sp+1,f,c
  3297  001444                     i2l179:
  3298                           
  3299                           ;doprnt.c: 1469: }
  3300                           ;doprnt.c: 1472: prec = c;
  3301  001444  C01A  F017         	movff	sprintf@c,sprintf@prec
  3302                           
  3303                           ;doprnt.c: 1474: while(prec--) {
  3304  001448  D029               	goto	i2l180
  3305  00144A                     
  3306                           ;doprnt.c: 1478: {
  3307                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3308  00144A  5017               	movf	sprintf@prec,w,c
  3309  00144C  0D02               	mullw	2
  3310  00144E  0E13               	movlw	low _dpowers
  3311  001450  24F3               	addwf	prodl,w,c
  3312  001452  6EF6               	movwf	tblptrl,c
  3313  001454  0E10               	movlw	high _dpowers
  3314  001456  20F4               	addwfc	prodh,w,c
  3315  001458  6EF7               	movwf	tblptrh,c
  3316  00145A                     	if	0	;There are less than 3 active tblptr bytes
  3317  00145A                     	endif
  3318  00145A  0009               	tblrd		*+
  3319  00145C  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3320  001460  000A               	tblrd		*-
  3321  001462  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3322  001466  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  3323  00146A  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  3324  00146E  ECC7  F00D         	call	___lwdiv	;wreg free
  3325  001472  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3326  001476  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3327  00147A  0E00               	movlw	0
  3328  00147C  6E0B               	movwf	___lwmod@divisor+1,c
  3329  00147E  0E0A               	movlw	10
  3330  001480  6E0A               	movwf	___lwmod@divisor,c
  3331  001482  EC19  F00E         	call	___lwmod	;wreg free
  3332  001486  5008               	movf	?___lwmod,w,c
  3333  001488  0F30               	addlw	48
  3334  00148A  6E1A               	movwf	sprintf@c,c
  3335                           
  3336                           ;doprnt.c: 1523: }
  3337                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3338  00148C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3339  001490  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3340  001494  C01A  FFDF         	movff	sprintf@c,indf2
  3341  001498  4A0D               	infsnz	sprintf@sp,f,c
  3342  00149A  2A0E               	incf	sprintf@sp+1,f,c
  3343  00149C                     i2l180:
  3344  00149C  0617               	decf	sprintf@prec,f,c
  3345  00149E  2817               	incf	sprintf@prec,w,c
  3346  0014A0  A4D8               	btfss	status,2,c
  3347  0014A2  D7D3               	goto	i2l181
  3348  0014A4                     i2u114_40:
  3349  0014A4  C00F  FFF6         	movff	sprintf@f,tblptrl
  3350  0014A8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3351  0014AC  4A0F               	infsnz	sprintf@f,f,c
  3352  0014AE  2A10               	incf	sprintf@f+1,f,c
  3353  0014B0                     	if	0	;tblptru may be non-zero
  3354  0014B0                     	endif
  3355  0014B0                     	if	0	;tblptru may be non-zero
  3356  0014B0                     	endif
  3357  0014B0  0008               	tblrd		*
  3358  0014B2  CFF5 F01A          	movff	tablat,sprintf@c
  3359  0014B6  501A               	movf	sprintf@c,w,c
  3360  0014B8  A4D8               	btfss	status,2,c
  3361  0014BA  D768               	goto	i2l166
  3362  0014BC                     i2u115_40:
  3363                           
  3364                           ;doprnt.c: 1538: *sp = 0;
  3365                           
  3366                           ;doprnt.c: 1525: }
  3367                           ;doprnt.c: 1533: }
  3368                           ;doprnt.c: 1535: alldone:
  3369  0014BC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3370  0014C0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3371  0014C4  0E00               	movlw	0
  3372  0014C6  6EDF               	movwf	indf2,c
  3373  0014C8  0012               	return	
  3374  0014CA                     __end_of_sprintf:
  3375                           	opt stack 0
  3376                           pclatu	equ	0xFFB
  3377                           pclath	equ	0xFFA
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           intcon	equ	0xFF2
  3385                           postinc0	equ	0xFEE
  3386                           fsr0h	equ	0xFEA
  3387                           fsr0l	equ	0xFE9
  3388                           wreg	equ	0xFE8
  3389                           fsr1h	equ	0xFE2
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function ___lwmod *****************
  3399 ;; Defined at:
  3400 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  dividend        2    7[COMRAM] unsigned int 
  3403 ;;  divisor         2    9[COMRAM] unsigned int 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  counter         1   11[COMRAM] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  2    7[COMRAM] unsigned int 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3415 ;;      Params:         4       0       0       0       0       0       0       0       0
  3416 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3418 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3419 ;;Total ram usage:        5 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_sprintf
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text16
  3429  001C32                     __ptext16:
  3430                           	opt stack 0
  3431  001C32                     ___lwmod:
  3432                           	opt stack 24
  3433                           
  3434                           ;incstack = 0
  3435  001C32  500A               	movf	___lwmod@divisor,w,c
  3436  001C34  100B               	iorwf	___lwmod@divisor+1,w,c
  3437  001C36  B4D8               	btfsc	status,2,c
  3438  001C38  D018               	goto	i2l603
  3439  001C3A  0E01               	movlw	1
  3440  001C3C  6E0C               	movwf	___lwmod@counter,c
  3441  001C3E  D004               	goto	i2l598
  3442  001C40  90D8               	bcf	status,0,c
  3443  001C42  360A               	rlcf	___lwmod@divisor,f,c
  3444  001C44  360B               	rlcf	___lwmod@divisor+1,f,c
  3445  001C46  2A0C               	incf	___lwmod@counter,f,c
  3446  001C48                     i2l598:
  3447  001C48  AE0B               	btfss	___lwmod@divisor+1,7,c
  3448  001C4A  D7FA               	goto	i2l599
  3449  001C4C                     i2u100_40:
  3450  001C4C  500A               	movf	___lwmod@divisor,w,c
  3451  001C4E  5C08               	subwf	___lwmod@dividend,w,c
  3452  001C50  500B               	movf	___lwmod@divisor+1,w,c
  3453  001C52  5809               	subwfb	___lwmod@dividend+1,w,c
  3454  001C54  A0D8               	btfss	status,0,c
  3455  001C56  D004               	goto	i2l602
  3456  001C58  500A               	movf	___lwmod@divisor,w,c
  3457  001C5A  5E08               	subwf	___lwmod@dividend,f,c
  3458  001C5C  500B               	movf	___lwmod@divisor+1,w,c
  3459  001C5E  5A09               	subwfb	___lwmod@dividend+1,f,c
  3460  001C60                     i2l602:
  3461  001C60  90D8               	bcf	status,0,c
  3462  001C62  320B               	rrcf	___lwmod@divisor+1,f,c
  3463  001C64  320A               	rrcf	___lwmod@divisor,f,c
  3464  001C66  2E0C               	decfsz	___lwmod@counter,f,c
  3465  001C68  D7F1               	goto	i2u100_40
  3466  001C6A                     i2l603:
  3467  001C6A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3468  001C6E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3469  001C72  0012               	return		;funcret
  3470  001C74                     __end_of___lwmod:
  3471                           	opt stack 0
  3472                           pclatu	equ	0xFFB
  3473                           pclath	equ	0xFFA
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           intcon	equ	0xFF2
  3481                           postinc0	equ	0xFEE
  3482                           fsr0h	equ	0xFEA
  3483                           fsr0l	equ	0xFE9
  3484                           wreg	equ	0xFE8
  3485                           fsr1h	equ	0xFE2
  3486                           fsr1l	equ	0xFE1
  3487                           indf2	equ	0xFDF
  3488                           postinc2	equ	0xFDE
  3489                           postdec2	equ	0xFDD
  3490                           fsr2h	equ	0xFDA
  3491                           fsr2l	equ	0xFD9
  3492                           status	equ	0xFD8
  3493                           
  3494 ;; *************** function ___lwdiv *****************
  3495 ;; Defined at:
  3496 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;  dividend        2    0[COMRAM] unsigned int 
  3499 ;;  divisor         2    2[COMRAM] unsigned int 
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;  quotient        2    4[COMRAM] unsigned int 
  3502 ;;  counter         1    6[COMRAM] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  2    0[COMRAM] unsigned int 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3512 ;;      Params:         4       0       0       0       0       0       0       0       0
  3513 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3515 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3516 ;;Total ram usage:        7 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_sprintf
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text17
  3526  001B8E                     __ptext17:
  3527                           	opt stack 0
  3528  001B8E                     ___lwdiv:
  3529                           	opt stack 24
  3530                           
  3531                           ;incstack = 0
  3532  001B8E  0E00               	movlw	0
  3533  001B90  6E06               	movwf	___lwdiv@quotient+1,c
  3534  001B92  0E00               	movlw	0
  3535  001B94  6E05               	movwf	___lwdiv@quotient,c
  3536  001B96  5003               	movf	___lwdiv@divisor,w,c
  3537  001B98  1004               	iorwf	___lwdiv@divisor+1,w,c
  3538  001B9A  B4D8               	btfsc	status,2,c
  3539  001B9C  D01C               	goto	i2l593
  3540  001B9E  0E01               	movlw	1
  3541  001BA0  6E07               	movwf	___lwdiv@counter,c
  3542  001BA2  D004               	goto	i2l588
  3543  001BA4  90D8               	bcf	status,0,c
  3544  001BA6  3603               	rlcf	___lwdiv@divisor,f,c
  3545  001BA8  3604               	rlcf	___lwdiv@divisor+1,f,c
  3546  001BAA  2A07               	incf	___lwdiv@counter,f,c
  3547  001BAC                     i2l588:
  3548  001BAC  AE04               	btfss	___lwdiv@divisor+1,7,c
  3549  001BAE  D7FA               	goto	i2l589
  3550  001BB0                     i2u97_40:
  3551  001BB0  90D8               	bcf	status,0,c
  3552  001BB2  3605               	rlcf	___lwdiv@quotient,f,c
  3553  001BB4  3606               	rlcf	___lwdiv@quotient+1,f,c
  3554  001BB6  5003               	movf	___lwdiv@divisor,w,c
  3555  001BB8  5C01               	subwf	___lwdiv@dividend,w,c
  3556  001BBA  5004               	movf	___lwdiv@divisor+1,w,c
  3557  001BBC  5802               	subwfb	___lwdiv@dividend+1,w,c
  3558  001BBE  A0D8               	btfss	status,0,c
  3559  001BC0  D005               	goto	i2l592
  3560  001BC2  5003               	movf	___lwdiv@divisor,w,c
  3561  001BC4  5E01               	subwf	___lwdiv@dividend,f,c
  3562  001BC6  5004               	movf	___lwdiv@divisor+1,w,c
  3563  001BC8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3564  001BCA  8005               	bsf	___lwdiv@quotient,0,c
  3565  001BCC                     i2l592:
  3566  001BCC  90D8               	bcf	status,0,c
  3567  001BCE  3204               	rrcf	___lwdiv@divisor+1,f,c
  3568  001BD0  3203               	rrcf	___lwdiv@divisor,f,c
  3569  001BD2  2E07               	decfsz	___lwdiv@counter,f,c
  3570  001BD4  D7ED               	goto	i2u97_40
  3571  001BD6                     i2l593:
  3572  001BD6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3573  001BDA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3574  001BDE  0012               	return		;funcret
  3575  001BE0                     __end_of___lwdiv:
  3576                           	opt stack 0
  3577                           pclatu	equ	0xFFB
  3578                           pclath	equ	0xFFA
  3579                           tblptru	equ	0xFF8
  3580                           tblptrh	equ	0xFF7
  3581                           tblptrl	equ	0xFF6
  3582                           tablat	equ	0xFF5
  3583                           prodh	equ	0xFF4
  3584                           prodl	equ	0xFF3
  3585                           intcon	equ	0xFF2
  3586                           postinc0	equ	0xFEE
  3587                           fsr0h	equ	0xFEA
  3588                           fsr0l	equ	0xFE9
  3589                           wreg	equ	0xFE8
  3590                           fsr1h	equ	0xFE2
  3591                           fsr1l	equ	0xFE1
  3592                           indf2	equ	0xFDF
  3593                           postinc2	equ	0xFDE
  3594                           postdec2	equ	0xFDD
  3595                           fsr2h	equ	0xFDA
  3596                           fsr2l	equ	0xFD9
  3597                           status	equ	0xFD8
  3598                           
  3599 ;; *************** function _USART_SendString *****************
  3600 ;; Defined at:
  3601 ;;		line 35 in file "USART_Source_File.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;  str             2    1[COMRAM] PTR const unsigned char 
  3604 ;;		 -> STR_10(2), STR_9(2), STR_7(2), STR_5(2), 
  3605 ;;		 -> STR_3(2), mystring(16), 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      void 
  3610 ;; Registers used:
  3611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3617 ;;      Params:         2       0       0       0       0       0       0       0       0
  3618 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3619 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3620 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3621 ;;Total ram usage:        2 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; Hardware stack levels required when called:    1
  3624 ;; This function calls:
  3625 ;;		_USART_TxChar
  3626 ;; This function is called by:
  3627 ;;		_txSensorsData
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           	psect	text18
  3632  001BE0                     __ptext18:
  3633                           	opt stack 0
  3634  001BE0                     _USART_SendString:
  3635                           	opt stack 24
  3636                           
  3637                           ;USART_Source_File.c: 37: while(*str!='\0')
  3638                           
  3639                           ;incstack = 0
  3640  001BE0  D014               	goto	i2l38
  3641  001BE2                     
  3642                           ;USART_Source_File.c: 38: {
  3643                           ;USART_Source_File.c: 39: USART_TxChar(*str);
  3644  001BE2  C002  FFF6         	movff	USART_SendString@str,tblptrl
  3645  001BE6  C003  FFF7         	movff	USART_SendString@str+1,tblptrh
  3646  001BEA  6AF8               	clrf	tblptru,c
  3647  001BEC  0E07               	movlw	(high __ramtop+-1)
  3648  001BEE  64F7               	cpfsgt	tblptrh,c
  3649  001BF0  D003               	bra	i2u102_47
  3650  001BF2  0008               	tblrd		*
  3651  001BF4  50F5               	movf	tablat,w,c
  3652  001BF6  D005               	bra	i2u102_40
  3653  001BF8                     i2u102_47:
  3654  001BF8  CFF6 FFE9          	movff	tblptrl,fsr0l
  3655  001BFC  CFF7 FFEA          	movff	tblptrh,fsr0h
  3656  001C00  50EF               	movf	indf0,w,c
  3657  001C02                     i2u102_40:
  3658  001C02  EC98  F00E         	call	_USART_TxChar
  3659                           
  3660                           ;USART_Source_File.c: 40: str++;
  3661  001C06  4A02               	infsnz	USART_SendString@str,f,c
  3662  001C08  2A03               	incf	USART_SendString@str+1,f,c
  3663  001C0A                     i2l38:
  3664  001C0A  C002  FFF6         	movff	USART_SendString@str,tblptrl
  3665  001C0E  C003  FFF7         	movff	USART_SendString@str+1,tblptrh
  3666  001C12  6AF8               	clrf	tblptru,c
  3667  001C14  0E07               	movlw	(high __ramtop+-1)
  3668  001C16  64F7               	cpfsgt	tblptrh,c
  3669  001C18  D003               	bra	i2u103_47
  3670  001C1A  0008               	tblrd		*
  3671  001C1C  50F5               	movf	tablat,w,c
  3672  001C1E  D005               	bra	i2u103_40
  3673  001C20                     i2u103_47:
  3674  001C20  CFF6 FFE9          	movff	tblptrl,fsr0l
  3675  001C24  CFF7 FFEA          	movff	tblptrh,fsr0h
  3676  001C28  50EF               	movf	indf0,w,c
  3677  001C2A                     i2u103_40:
  3678  001C2A  0900               	iorlw	0
  3679  001C2C  B4D8               	btfsc	status,2,c
  3680  001C2E  0012               	return	
  3681  001C30  D7D8               	goto	i2l39
  3682  001C32                     __end_of_USART_SendString:
  3683                           	opt stack 0
  3684                           pclatu	equ	0xFFB
  3685                           pclath	equ	0xFFA
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           indf0	equ	0xFEF
  3694                           postinc0	equ	0xFEE
  3695                           fsr0h	equ	0xFEA
  3696                           fsr0l	equ	0xFE9
  3697                           wreg	equ	0xFE8
  3698                           fsr1h	equ	0xFE2
  3699                           fsr1l	equ	0xFE1
  3700                           indf2	equ	0xFDF
  3701                           postinc2	equ	0xFDE
  3702                           postdec2	equ	0xFDD
  3703                           fsr2h	equ	0xFDA
  3704                           fsr2l	equ	0xFD9
  3705                           status	equ	0xFD8
  3706                           
  3707 ;; *************** function _USART_TxChar *****************
  3708 ;; Defined at:
  3709 ;;		line 22 in file "USART_Source_File.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  data            1    wreg     unsigned char 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;  data            1    0[COMRAM] unsigned char 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  1    wreg      void 
  3716 ;; Registers used:
  3717 ;;		wreg
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3723 ;;      Params:         0       0       0       0       0       0       0       0       0
  3724 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3726 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3727 ;;Total ram usage:        1 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_USART_SendString
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text19
  3737  001D30                     __ptext19:
  3738                           	opt stack 0
  3739  001D30                     _USART_TxChar:
  3740                           	opt stack 24
  3741                           
  3742                           ;incstack = 0
  3743                           ;USART_TxChar@data stored from wreg
  3744  001D30  6E01               	movwf	USART_TxChar@data,c
  3745  001D32                     
  3746                           ;USART_Source_File.c: 24: while(!TXIF);
  3747  001D32  A89E               	btfss	3998,4,c	;volatile
  3748  001D34  D7FE               	goto	i2l806
  3749                           
  3750                           ;USART_Source_File.c: 25: TXREG = data;
  3751  001D36  C001  FFAD         	movff	USART_TxChar@data,4013	;volatile
  3752  001D3A  0012               	return		;funcret
  3753  001D3C                     __end_of_USART_TxChar:
  3754                           	opt stack 0
  3755                           pclatu	equ	0xFFB
  3756                           pclath	equ	0xFFA
  3757                           tblptru	equ	0xFF8
  3758                           tblptrh	equ	0xFF7
  3759                           tblptrl	equ	0xFF6
  3760                           tablat	equ	0xFF5
  3761                           prodh	equ	0xFF4
  3762                           prodl	equ	0xFF3
  3763                           intcon	equ	0xFF2
  3764                           indf0	equ	0xFEF
  3765                           postinc0	equ	0xFEE
  3766                           fsr0h	equ	0xFEA
  3767                           fsr0l	equ	0xFE9
  3768                           wreg	equ	0xFE8
  3769                           fsr1h	equ	0xFE2
  3770                           fsr1l	equ	0xFE1
  3771                           indf2	equ	0xFDF
  3772                           postinc2	equ	0xFDE
  3773                           postdec2	equ	0xFDD
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8
  3777                           
  3778 ;; *************** function _USART_RxChar *****************
  3779 ;; Defined at:
  3780 ;;		line 28 in file "USART_Source_File.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      unsigned char 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3797 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_ISR
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text20
  3808  001D3C                     __ptext20:
  3809                           	opt stack 0
  3810  001D3C                     _USART_RxChar:
  3811                           	opt stack 26
  3812                           
  3813                           ;USART_Source_File.c: 30: while(!RCIF);
  3814                           
  3815                           ;incstack = 0
  3816  001D3C  AA9E               	btfss	3998,5,c	;volatile
  3817  001D3E  D7FE               	goto	_USART_RxChar
  3818                           
  3819                           ;USART_Source_File.c: 31: return(RCREG);
  3820  001D40  50AE               	movf	4014,w,c	;volatile
  3821  001D42  0012               	return	
  3822  001D44                     __end_of_USART_RxChar:
  3823                           	opt stack 0
  3824                           pclatu	equ	0xFFB
  3825                           pclath	equ	0xFFA
  3826                           tblptru	equ	0xFF8
  3827                           tblptrh	equ	0xFF7
  3828                           tblptrl	equ	0xFF6
  3829                           tablat	equ	0xFF5
  3830                           prodh	equ	0xFF4
  3831                           prodl	equ	0xFF3
  3832                           intcon	equ	0xFF2
  3833                           indf0	equ	0xFEF
  3834                           postinc0	equ	0xFEE
  3835                           fsr0h	equ	0xFEA
  3836                           fsr0l	equ	0xFE9
  3837                           wreg	equ	0xFE8
  3838                           fsr1h	equ	0xFE2
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           pclatu	equ	0xFFB
  3847                           pclath	equ	0xFFA
  3848                           tblptru	equ	0xFF8
  3849                           tblptrh	equ	0xFF7
  3850                           tblptrl	equ	0xFF6
  3851                           tablat	equ	0xFF5
  3852                           prodh	equ	0xFF4
  3853                           prodl	equ	0xFF3
  3854                           intcon	equ	0xFF2
  3855                           indf0	equ	0xFEF
  3856                           postinc0	equ	0xFEE
  3857                           fsr0h	equ	0xFEA
  3858                           fsr0l	equ	0xFE9
  3859                           wreg	equ	0xFE8
  3860                           fsr1h	equ	0xFE2
  3861                           fsr1l	equ	0xFE1
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869                           	psect	rparam
  3870  0000                     pclatu	equ	0xFFB
  3871                           pclath	equ	0xFFA
  3872                           tblptru	equ	0xFF8
  3873                           tblptrh	equ	0xFF7
  3874                           tblptrl	equ	0xFF6
  3875                           tablat	equ	0xFF5
  3876                           prodh	equ	0xFF4
  3877                           prodl	equ	0xFF3
  3878                           intcon	equ	0xFF2
  3879                           indf0	equ	0xFEF
  3880                           postinc0	equ	0xFEE
  3881                           fsr0h	equ	0xFEA
  3882                           fsr0l	equ	0xFE9
  3883                           wreg	equ	0xFE8
  3884                           fsr1h	equ	0xFE2
  3885                           fsr1l	equ	0xFE1
  3886                           indf2	equ	0xFDF
  3887                           postinc2	equ	0xFDE
  3888                           postdec2	equ	0xFDD
  3889                           fsr2h	equ	0xFDA
  3890                           fsr2l	equ	0xFD9
  3891                           status	equ	0xFD8
  3892                           
  3893                           	psect	temp
  3894  000051                     btemp:
  3895                           	opt stack 0
  3896  000051                     	ds	1
  3897  0000                     int$flags	set	btemp
  3898  0000                     wtemp6	set	btemp+1
  3899                           pclatu	equ	0xFFB
  3900                           pclath	equ	0xFFA
  3901                           tblptru	equ	0xFF8
  3902                           tblptrh	equ	0xFF7
  3903                           tblptrl	equ	0xFF6
  3904                           tablat	equ	0xFF5
  3905                           prodh	equ	0xFF4
  3906                           prodl	equ	0xFF3
  3907                           intcon	equ	0xFF2
  3908                           indf0	equ	0xFEF
  3909                           postinc0	equ	0xFEE
  3910                           fsr0h	equ	0xFEA
  3911                           fsr0l	equ	0xFE9
  3912                           wreg	equ	0xFE8
  3913                           fsr1h	equ	0xFE2
  3914                           fsr1l	equ	0xFE1
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8


Data Sizes:
    Strings     7
    Constant    10
    Data        0
    BSS         195
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      80
    BANK0           160     66      66
    BANK1           256      0     160
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_8(CODE[3]), STR_6(CODE[3]), STR_4(CODE[3]), STR_2(CODE[3]), 
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> mystring(COMRAM[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    USART_SendString@str	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_7(CODE[2]), STR_5(CODE[2]), 
		 -> STR_3(CODE[2]), mystring(COMRAM[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _txSensorsData->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USART_SendString->_USART_TxChar

Critical Paths under _main in BANK0

    _main->_USART_Init
    _readSensor->___awdiv
    ___awdiv->___wmul
    _USART_Init->___fttol
    ___fttol->___ftadd
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___altoft->___ftpack

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               152   152      0   15609
                                             64 BANK0      2     2      0
                            _MSdelay
                         _USART_Init
                         _readSensor
                        _tackeAction
 ---------------------------------------------------------------------------------
 (1) _tackeAction                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _readSensor                                           2     2      0    3208
                                             14 BANK0      2     2      0
                            _MSdelay
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1132
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1345
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _MSdelay                                              6     4      2     731
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           4     0      4   11667
                                             60 BANK0      4     0      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     328
                                             45 BANK0     15    11      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3573
                                             18 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4518
                                             33 BANK0     12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    3127
                                              8 BANK0     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2833
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 19    19      0    2823
                                             26 COMRAM    19    19      0
                       _USART_RxChar
                      _txSensorsData
                          i2_MSdelay
 ---------------------------------------------------------------------------------
 (5) i2_MSdelay                                            6     4      2     118
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _txSensorsData                                        0     0      0    2682
                   _USART_SendString
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             23    17      6    1862
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _USART_SendString                                     2     0      2     820
                                              1 COMRAM     2     0      2
                       _USART_TxChar
 ---------------------------------------------------------------------------------
 (7) _USART_TxChar                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _USART_RxChar                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MSdelay
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   _readSensor
     _MSdelay
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _tackeAction

 _ISR (ROOT)
   _USART_RxChar
   _txSensorsData
     _USART_SendString
       _USART_TxChar
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   i2_MSdelay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A0       7       62.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     42      42       5       41.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      20        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Feb 08 01:14:02 2018

             ___altoft@exp 0070              ___altoft@sign 0071                         l44 1C9E  
                       l45 1C80               ___awdiv@sign 006B            _RESPONSE_BUFFER 0100  
              __CFG_BOR$ON 000000        ___wmul@multiplicand 0062                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000               ___ftadd@exp1 008C               ___ftadd@exp2 008B  
             ___ftadd@sign 008A                        l111 102C                        l120 112A  
                      l114 107E                        l130 1B48                        l123 1180  
                      l131 1B4A                        l132 1B5E                        l117 10D4  
                      l133 1B60                        l134 1B74                        l135 1B76  
                      l400 188E                        l136 1B8A                        l128 1B32  
                      l129 1B34                        l153 1972                        l402 18CC  
                      l403 18B6                        l405 18F4                        l501 1676  
                      l406 18EA                        l270 1A50                        l430 1228  
                      l510 16B6                        l502 1666                        l360 1A14  
                      l352 19BC                        l361 1A22                        l353 19CC  
                      l434 1252                        l507 169A                        l355 19EA  
                      l444 12AE                        l508 168E                        l356 19E2  
                      l269 1A5C                        l453 12EC                        l445 12A4  
                      l454 12E2                        l439 12B8                        l463 16F2  
                      l359 1A0A                        l456 1310                        l457 132C  
                      l465 171A                        l458 135C                        l466 1758  
                      l467 177E                        l399 1898                        l499 15FE  
             __CFG_CPB$OFF 000000               __CFG_CPD$OFF 000000                        _ISR 1008  
                      wreg 000FE8               __CFG_LVP$OFF 000000                       ?_ISR 0001  
             ___ftdiv@cntr 007B               ___ftdiv@sign 0080               __CFG_WDT$OFF 000000  
                     l1900 1C9A                       l1892 1C88                       STR_1 101D  
                     STR_2 101D                       STR_3 1022                       STR_4 101D  
                     STR_5 1022                       STR_6 101D                       STR_7 1022  
                     STR_8 101D                       STR_9 1022             ?_txSensorsData 0001  
                     u2000 12C0                       u2030 12F4                       u1501 15E2  
                     u2150 19EE                       u2230 1B2E                       u2071 16DA  
                     u1520 161C                       u2240 1B44                       u2250 1B5A  
                     u2091 1702                       u2260 1B70                       u1525 1614  
                     u2270 1B86                       u1560 16A0                       u1740 1880  
                     u1900 121A                       u1820 1C9A                       u1930 1244  
                     u1780 18FE                       u1861 11E6                       u1871 11FA  
                     u1960 1282                       _RCIF 007CF5                       i2l44 1CD4  
                     i2l45 1CB6                       i2l38 1C0A                       i2l39 1BE2  
                     _TXIF 007CF4                       _main 191E               ___ftpack@arg 0060  
                     _rain 0034               ___ftpack@exp 0063                       _temp 003A  
                     _soil 0038                       fsr0h 000FEA                       fsr1h 000FE2  
                     indf0 000FEF                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0051   __end_of_USART_SendString 1C32                       prodh 000FF4  
                     prodl 000FF3                       start 100E            __end_of_MSdelay 1CAC  
            __CFG_IESO$OFF 000000               ___param_bank 000000                      ??_ISR 001B  
             ___fttol@exp1 009B               ___fttol@lval 0097              __CFG_PLLDIV$1 000000  
           __CFG_CCP2MX$ON 000000                      ?_main 0001            __end_of___awdiv 1A2C  
          __end_of___ftadd 1382                      STR_10 1020            __end_of___ftdiv 17B0  
          ___awdiv@divisor 0068            __end_of___fttol 16C8            __end_of___lwdiv 1BE0  
          __end_of___lwmod 1C74                      i2l146 181C                      i2l180 149C  
                    i2l181 144A                      i2l173 13D0                      i2l166 138C  
                    i2l175 13F8                      i2l167 13A6                      i2l602 1C60  
                    i2l603 1C6A                      i2l179 1444                      i2l806 1D32  
                    i2l592 1BCC                      i2l593 1BD6                      i2l588 1BAC  
                    i2l589 1BA4                      i2l598 1C48                      i2l599 1C40  
          ___awdiv@counter 006A                      _RCREG 000FAE                      _RCSTA 000FAB  
                    _SPBRG 000FAF                      _PORTD 000F83              __CFG_USBDIV$1 000000  
                    _TRISD 000F95                      _TXREG 000FAD                      _TXSTA 000FAC  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000         __size_ofi2_MSdelay 0036  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers 101D                      _force 0036                      _light 0032  
            ___ftpack@sign 0064               ?_tackeAction 0001                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8                      wtemp6 0052  
          __end_of_sprintf 14CA             __CFG_ICPRT$OFF 000000                ?_USART_Init 009C  
           __CFG_MCLRE$OFF 000000            __initialization 1D0A               __end_of_main 19A6  
                   ??_main 00A0              ___fttol@sign1 0096              __activetblptr 000002  
          ??_txSensorsData 001B                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _ADCON2 000FC0           __end_of___altoft 1AA6                     _ADRESH 000FC4  
         ___awdiv@dividend 0066           __end_of___ftpack 191E                  ??_MSdelay 0062  
                   i2l1458 13FC                     i2l1816 1CD0                     i2l1808 1CBE  
                   _OSCCON 000FD3                     _TRISC6 007CA6                     _TRISC7 007CA7  
                   _STATUS 000FD8             __CFG_XINST$OFF 000000          __end_ofi2_MSdelay 1CE2  
                   ___wmul 1CE2                  ??___awdiv 006A                  ??___ftadd 0087  
           __CFG_STVREN$ON 000000                  ??___ftdiv 0078                  ??___fttol 0091  
                ??___lwdiv 0005                  ??___lwmod 000C                     clear_0 1D10  
                   clear_1 1D1C           ___awdiv@quotient 006C               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
      __size_of_USART_Init 0078                  ??_sprintf 0013                 __accesstop 0060  
  __end_of__initialization 1D22                 ___altoft@c 0068            __CFG_PBADEN$OFF 000000  
               ___ftadd@f1 0081                 ___ftadd@f2 0084              ___rparam_used 000001  
               ___ftdiv@f1 0072                 ___ftdiv@f2 0075                 ___ftdiv@f3 007C  
               ___fttol@f1 008D             __pcstackCOMRAM 0001                 __pbssBANK1 0100  
     __size_of_tackeAction 0070          ?_USART_SendString 0002         ??_USART_SendString 0004  
                  ?___wmul 0060                  ?___altoft 0068                    _BAUDCON 000FB8  
                ?___ftpack 0060                    i2u97_40 1BB0                    _MSdelay 1C74  
          __CFG_VREGEN$OFF 000000                    _Counter 003E               ??_USART_Init 00A0  
                  __Hparam 0000                    __Lparam 0000                    _TimeOut 002E  
                  ___awdiv 19A6                    ___ftadd 11D4                    ___ftdiv 16C8  
          __size_of___wmul 0028                    ___fttol 15D0                    ___lwdiv 1B8E  
                  ___lwmod 1C32               __psmallconst 1012                 _readSensor 1026  
               ??___altoft 006C                    __pcinit 1D0A                 ??___ftpack 0065  
                  __ramtop 0800                    __ptext0 191E                    __ptext1 1B1E  
                  __ptext2 1026                    __ptext3 1CE2                    __ptext4 19A6  
                  __ptext5 1C74                    __ptext6 1AA6                    __ptext7 15D0  
                  __ptext8 16C8                    __ptext9 11D4        USART_SendString@str 0002  
             __size_of_ISR 0866                    _dpowers 1013                    _pointer 003C  
       __end_of_USART_Init 1B1E                    _sprintf 1382             __pintcode_body 17B0  
     end_of_initialization 1D22              __Lmediumconst 0000                    int_func 17B0  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                i2_MSdelay 1CAC                  _PORTDbits 000F83      __end_of_txSensorsData 15D0  
      USART_Init@baud_rate 009C              ?_USART_RxChar 0001                ___ftdiv@exp 007F  
            ?_USART_TxChar 0001                ?_readSensor 0001             __end_of___wmul 1D0A  
               ?i2_MSdelay 0001        start_initialization 1D0A                __end_of_ISR 186E  
           ??_USART_RxChar 0001             ??_USART_TxChar 0001                   ??___wmul 0064  
             ISR@oldstatus 002D           __CFG_LPT1OSC$OFF 000000  __size_of_USART_SendString 0052  
        __size_of___altoft 007A          __size_of___ftpack 00B0                __pbssCOMRAM 002E  
            __pcstackBANK0 0060            _Response_Status 0040              ??_tackeAction 0060  
                 ?_MSdelay 0060        __size_of_readSensor 01AE                sprintf@flag 0016  
              sprintf@prec 0017           ___lwdiv@dividend 0001               i2MSdelay@val 0001  
                __pintcode 1008                   ?___awdiv 0066                   ?___ftadd 0081  
                 ?___ftdiv 0072                   ?___fttol 008D                   ?___lwdiv 0001  
                 ?___lwmod 0008                ??i2_MSdelay 0003                __smallconst 1012  
         ___lwdiv@quotient 0005                   ?_sprintf 000D                   MSdelay@i 0062  
                 MSdelay@j 0064             ___wmul@product 0064                   _PIE1bits 000F9D  
      __end_of_tackeAction 1B8E                   i2u100_40 1C4C                   i2u102_40 1C02  
                 i2u102_47 1BF8                   i2u103_40 1C2A                   i2u103_47 1C20  
                 i2u112_40 1428                   i2u114_40 14A4                   i2u115_40 14BC  
                 i2u169_40 1CD0           __CFG_WDTPS$32768 000000                 _ADCON0bits 000FC2  
     __end_of_USART_RxChar 1D44       __end_of_USART_TxChar 1D3C          ___wmul@multiplier 0060  
                main@start 00A0           __size_of_MSdelay 0038                   __Hrparam 0000  
                 __Lrparam 0000           USART_TxChar@data 0001               ??_readSensor 006E  
         __size_of___awdiv 0086           __size_of___ftadd 01AE           __size_of___ftdiv 00E8  
                 ___altoft 1A2C           __size_of___fttol 00F8           __size_of___lwdiv 0052  
         __size_of___lwmod 0042                   ___ftpack 186E           _USART_SendString 1BE0  
               sprintf@val 0018            ___lwdiv@divisor 0003            ___lwdiv@counter 0007  
                 __ptext10 1A2C                   __ptext11 186E                   __ptext20 1D3C  
                 __ptext13 1CAC                   __ptext14 14CA                   __ptext15 1382  
                 __ptext16 1C32                   __ptext17 1B8E                   __ptext18 1BE0  
                 __ptext19 1D30                _tackeAction 1B1E           __size_of_sprintf 0148  
       __end_of_readSensor 11D4              __size_of_main 0088                 MSdelay@val 0060  
                 int$flags 0051                   _mystring 0041     __size_of_txSensorsData 0106  
    __CFG_CPUDIV$OSC1_PLL2 000000                 _INTCONbits 000FF2                   intlevel2 0000  
                sprintf@ap 0014                  sprintf@sp 000D                 i2MSdelay@i 0003  
               i2MSdelay@j 0005           ___lwmod@dividend 0008      __size_of_USART_RxChar 0008  
    __size_of_USART_TxChar 000C        __CFG_FOSC$INTOSC_EC 000000                   sprintf@c 001A  
                 sprintf@f 000F            ___lwmod@divisor 000A            ___lwmod@counter 000C  
            _txSensorsData 14CA               _USART_RxChar 1D3C               _USART_TxChar 1D30  
               _USART_Init 1AA6  
